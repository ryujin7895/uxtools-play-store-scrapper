{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/components/common/Navbar.tsx", "../app/lib/theme.ts", "../app/routes/api.comments.ts", "../app/routes/api.compare.ts", "../app/lib/sentiment.ts", "../app/lib/keywords.ts", "../app/lib/trends.ts", "../app/routes/comparison.tsx", "../app/components/common/Sidebar.tsx", "../app/components/comparison/ComparisonDashboard.tsx", "../app/components/comparison/AppComparisonForm.tsx", "../app/components/comparison/MetricsComparison.tsx", "../app/components/comparison/SentimentDistributionCard.tsx", "../app/components/comparison/KeywordsComparison.tsx", "../app/components/comparison/SentimentDistribution.tsx", "../app/components/comparison/TrendAnalysis.tsx", "../app/components/comparison/RecentComments.tsx", "../app/components/comparison/ExportButton.tsx", "../app/routes/_index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { cssBundleHref } from \"@remix-run/css-bundle\";\nimport type { LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport { Analytics } from \"@vercel/analytics/react\";\nimport { Flowbite } from \"flowbite-react\";\nimport Navbar from \"./components/common/Navbar\";\nimport { theme } from \"./lib/theme\";\nimport styles from \"./tailwind.css\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles },\n...(cssBundleHref ? [{ rel: \"stylesheet\", href: cssBundleHref }] : []),\n{ rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n{\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\",\n  crossOrigin: \"anonymous\"\n},\n{\n  rel: \"stylesheet\",\n  href: \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\"\n}];\n\n\nexport function Layout({ children }: {children: React.ReactNode;}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full bg-gray-50 dark:bg-gray-900\">\n        <Flowbite theme={{ theme }}>\n          <Navbar />\n          <Outlet />\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n          <Analytics />\n        </Flowbite>\n      </body>\n    </html>);\n\n}", "import { DarkThemeToggle } from 'flowbite-react';\nimport { Bars3Icon } from '@heroicons/react/24/outline';\n\nexport default function Navbar() {\n  return (\n    <nav className=\"fixed top-0 z-50 w-full bg-white border-b border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n      <div className=\"px-3 py-3 lg:px-5 lg:pl-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center justify-start\">\n            <button \n              data-drawer-target=\"logo-sidebar\" \n              data-drawer-toggle=\"logo-sidebar\" \n              aria-controls=\"logo-sidebar\" \n              type=\"button\" \n              className=\"inline-flex items-center p-2 text-sm text-gray-500 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600\"\n            >\n              <span className=\"sr-only\">Open sidebar</span>\n              <Bars3Icon className=\"w-6 h-6\" />\n            </button>\n            <div className=\"flex ms-2 md:me-24\">\n              <span className=\"self-center text-xl font-semibold sm:text-2xl whitespace-nowrap dark:text-white\">\n                UX Tools\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center\">\n            <DarkThemeToggle className=\"rounded-full p-2.5 text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700\" />\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n} ", "import { CustomFlowbiteTheme } from 'flowbite-react';\n\nexport const theme: CustomFlowbiteTheme = {\n  sidebar: {\n    root: {\n      base: \"h-full\",\n      inner: \"h-full overflow-y-auto overflow-x-hidden bg-white/50 dark:bg-gray-900/50 py-4 px-3\"\n    },\n    item: {\n      base: \"flex items-center justify-center rounded-lg p-2 text-base font-normal text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800\",\n      active: \"bg-blue-50 dark:bg-blue-900/40 text-blue-600 dark:text-blue-400\",\n      icon: {\n        base: \"h-5 w-5 flex-shrink-0 transition duration-75 group-hover:text-gray-900 dark:group-hover:text-white\",\n        active: \"text-blue-600 dark:text-blue-400\"\n      }\n    }\n  },\n  button: {\n    base: \"group flex items-center justify-center p-0.5 text-center font-medium relative focus:z-10 focus:outline-none transition-all duration-200\",\n    pill: {\n      off: \"rounded-lg\",\n      on: \"rounded-full\"\n    }\n  },\n  navbar: {\n    root: {\n      base: \"fixed z-30 w-full border-b border-gray-200 bg-white/50 dark:border-gray-700 dark:bg-gray-900/50 backdrop-blur-xl\"\n    }\n  },\n  avatar: {\n    root: {\n      base: \"flex justify-center items-center space-x-4 rounded-full\",\n      bordered: \"p-1 ring-2\",\n      img: {\n        off: \"rounded-full\",\n        on: \"rounded-full\"\n      },\n      size: {\n        xs: \"w-6 h-6\",\n        sm: \"w-8 h-8\",\n        md: \"w-10 h-10\",\n        lg: \"w-20 h-20\",\n        xl: \"w-36 h-36\"\n      }\n    }\n  }\n} as const; ", "import { json } from \"@remix-run/node\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport gplay from \"google-play-scraper\";\nimport natural from \"natural\";\n\ninterface PlayStoreReview {\n  id: string;\n  userName: string;\n  text: string;\n  score: number;\n  thumbsUp: number;\n  date: string;\n}\n\ninterface Comment {\n  id: string;\n  userName: string;\n  content: string;\n  score: number;\n  thumbsUp: number;\n  date: string;\n  year: number;\n  sentiment: 'positive' | 'negative' | 'neutral';\n}\n\ninterface AnalysisResult {\n  comments: Comment[];\n  sentiment: {\n    positive: number;\n    negative: number;\n    neutral: number;\n  };\n  keywords: {\n    word: string;\n    count: number;\n  }[];\n  intentions: {\n    feature_request: Comment[];\n    bug_report: Comment[];\n    praise: Comment[];\n    complaint: Comment[];\n  };\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n  console.log('API endpoint called with method:', request.method);\n\n  // Add CORS headers\n  const headers = new Headers({\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"POST\",\n    \"Access-Control-Allow-Headers\": \"Content-Type\",\n  });\n\n  // Handle preflight requests\n  if (request.method === \"OPTIONS\") {\n    console.log('Handling OPTIONS request');\n    return new Response(null, { headers });\n  }\n\n  if (request.method !== \"POST\") {\n    console.log('Invalid method:', request.method);\n    return json(\n      { error: \"Method not allowed\" },\n      { status: 405, headers }\n    );\n  }\n\n  try {\n    const formData = await request.formData();\n    const url = formData.get(\"url\") as string;\n    const year = formData.get(\"year\") as string;\n    const searchTerm = formData.get(\"searchTerm\") as string;\n\n    console.log('Received form data:', { url, year, searchTerm });\n\n    if (!url) {\n      console.log('URL is missing');\n      return json(\n        { error: \"URL is required\" },\n        { status: 400, headers }\n      );\n    }\n\n    // Extract app ID from URL\n    const appId = url.split(\"id=\")[1]?.split(\"&\")[0];\n    if (!appId) {\n      console.log('Invalid Play Store URL:', url);\n      return json(\n        { error: \"Invalid Play Store URL\" },\n        { status: 400, headers }\n      );\n    }\n\n    console.log('Fetching reviews for app ID:', appId);\n\n    // Fetch comments with pagination\n    let allReviews: PlayStoreReview[] = [];\n    let nextPaginationToken: string | undefined = undefined;\n    const maxReviews = 5000;\n    let batchNumber = 0;\n    let reachedEnd = false;\n\n    console.log('Starting to fetch reviews (target limit:', maxReviews, ')');\n    \n    do {\n      batchNumber++;\n      console.log(`Fetching batch #${batchNumber}...`);\n      \n      try {\n        const reviewBatch: { data: PlayStoreReview[]; nextPaginationToken?: string } = await gplay.reviews({\n          appId,\n          sort: gplay.sort.NEWEST,\n          num: 150, // Increased batch size to 150\n          paginate: true,\n          nextPaginationToken,\n        });\n\n        if (!reviewBatch || !reviewBatch.data || reviewBatch.data.length === 0) {\n          console.log('No more reviews available in this batch');\n          reachedEnd = true;\n          break;\n        }\n\n        allReviews = allReviews.concat(reviewBatch.data);\n        nextPaginationToken = reviewBatch.nextPaginationToken;\n        \n        const progress = Math.min((allReviews.length / maxReviews) * 100, 100).toFixed(1);\n        console.log(`Batch #${batchNumber}: Got ${reviewBatch.data.length} reviews. Total: ${allReviews.length} (${progress}%)`);\n        console.log('Has next page token:', !!nextPaginationToken);\n        \n        // Stop if we've reached the maximum number of reviews\n        if (allReviews.length >= maxReviews) {\n          console.log(`Reached maximum review limit of ${maxReviews}`);\n          break;\n        }\n\n        // Stop if we don't have a next page token\n        if (!nextPaginationToken) {\n          console.log('No next page token available - reached end of reviews');\n          reachedEnd = true;\n          break;\n        }\n\n        // Add a small delay between requests to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        console.error(`Error in batch #${batchNumber}:`, error);\n        reachedEnd = true;\n        break;\n      }\n    } while (!reachedEnd);\n\n    if (allReviews.length === 0) {\n      console.log('No reviews found for app ID:', appId);\n      throw new Error(\"No reviews found\");\n    }\n\n    console.log(`Completed fetching reviews. Total retrieved: ${allReviews.length}`);\n    if (reachedEnd) {\n      console.log('Reached natural end of available reviews');\n    }\n\n    // Process and filter comments\n    const processedComments: Comment[] = allReviews\n      .map((comment: PlayStoreReview) => {\n        const reviewDate = new Date(comment.date || new Date());\n        const content = comment.text || \"\";\n        \n        // Calculate sentiment for this comment\n        const analyzer = new natural.SentimentAnalyzer(\"English\", natural.PorterStemmer, \"afinn\");\n        const sentimentScore = analyzer.getSentiment(content.split(\" \"));\n        const sentiment = sentimentScore > 0 ? 'positive' : sentimentScore < 0 ? 'negative' : 'neutral';\n\n        return {\n          id: comment.id || String(Math.random()),\n          userName: comment.userName || \"Anonymous\",\n          content,\n          score: comment.score || 0,\n          thumbsUp: comment.thumbsUp || 0,\n          date: reviewDate.toISOString(),\n          year: reviewDate.getFullYear(),\n          sentiment,\n        };\n      })\n      .filter((comment: Comment) => {\n        const matchesYear = year === \"all\" || comment.year.toString() === year;\n        const matchesSearch = !searchTerm || \n          comment.content.toLowerCase().includes(searchTerm.toLowerCase());\n        \n        console.log(`Comment from year ${comment.year}, matches year filter: ${matchesYear}, matches search: ${matchesSearch}`);\n        \n        return matchesYear && matchesSearch;\n      });\n\n    console.log(`After filtering: ${processedComments.length} comments match criteria`);\n\n    // Update sentiment counts based on pre-calculated sentiments\n    const sentiment = {\n      positive: processedComments.filter(c => c.sentiment === 'positive' as const).length,\n      negative: processedComments.filter(c => c.sentiment === 'negative' as const).length,\n      neutral: processedComments.filter(c => c.sentiment === 'neutral' as const).length,\n    };\n\n    // Keyword Extraction\n    const TfIdf = natural.TfIdf;\n    const tfidf = new TfIdf();\n    processedComments.forEach((comment: Comment) => {\n      tfidf.addDocument(comment.content);\n    });\n\n    const keywords = new Set<string>();\n    const keywordCounts: { [key: string]: number } = {};\n\n    processedComments.forEach((comment: Comment) => {\n      const words = comment.content.toLowerCase().split(/\\W+/);\n      words.forEach((word) => {\n        if (word.length > 3) {\n          keywords.add(word);\n          keywordCounts[word] = (keywordCounts[word] || 0) + 1;\n        }\n      });\n    });\n\n    const sortedKeywords = Array.from(keywords)\n      .map((word) => ({\n        word,\n        count: keywordCounts[word],\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    // Intention Analysis\n    const intentions = {\n      feature_request: [] as Comment[],\n      bug_report: [] as Comment[],\n      praise: [] as Comment[],\n      complaint: [] as Comment[],\n    };\n\n    const intentionKeywords = {\n      feature_request: [\"add\", \"would be nice\", \"should have\", \"need\", \"missing\"],\n      bug_report: [\"bug\", \"crash\", \"error\", \"issue\", \"problem\", \"not working\"],\n      praise: [\"great\", \"awesome\", \"love\", \"excellent\", \"perfect\", \"amazing\"],\n      complaint: [\"bad\", \"terrible\", \"poor\", \"waste\", \"disappointed\", \"awful\"],\n    };\n\n    processedComments.forEach((comment: Comment) => {\n      const content = comment.content.toLowerCase();\n      \n      for (const [intention, keywords] of Object.entries(intentionKeywords)) {\n        if (keywords.some((keyword) => content.includes(keyword))) {\n          intentions[intention as keyof typeof intentions].push(comment);\n        }\n      }\n    });\n\n    const result: AnalysisResult = {\n      comments: processedComments,\n      sentiment,\n      keywords: sortedKeywords,\n      intentions,\n    };\n\n    return json(result, { headers });\n  } catch (error) {\n    console.error(\"Error analyzing comments:\", error);\n    return json(\n      { error: error instanceof Error ? error.message : \"Failed to analyze comments\" },\n      { status: 500, headers }\n    );\n  }\n}; ", "import { ActionFunctionArgs, json } from \"@remix-run/node\";\nimport gplay from \"google-play-scraper\";\nimport { sentiment } from \"~/lib/sentiment\";\nimport { extractKeywords } from \"~/lib/keywords\";\nimport { groupByMonth } from \"~/lib/trends\";\n\ninterface PlayStoreAppInfo {\n  title: string;\n  description: string;\n  installs: string;\n  score: number;\n  ratings: number;\n  reviews: number;\n  price: string;\n  free: boolean;\n  currency: string;\n  developer: string;\n  developerEmail: string;\n  developerWebsite: string;\n  developerAddress: string;\n  privacyPolicy: string;\n  genre: string;\n  genreId: string;\n  familyGenre: string;\n  familyGenreId: string;\n  icon: string;\n  headerImage: string;\n  screenshots: string[];\n  video: string;\n  videoImage: string;\n  contentRating: string;\n  contentRatingDescription: string;\n  adSupported: boolean;\n  released: string;\n  updated: string;\n  version: string;\n  recentChanges: string;\n  url: string;\n}\n\ninterface ReviewData {\n  id: string;\n  userName: string;\n  userImage: string;\n  content: string;\n  score: number;\n  thumbsUpCount: number;\n  reviewCreatedVersion: string;\n  at: string;\n  replyContent: string;\n  repliedAt: string;\n}\n\ninterface SentimentData {\n  positive: number;\n  neutral: number;\n  negative: number;\n}\n\ninterface TrendData {\n  date: string;\n  positive: number;\n  neutral: number;\n  negative: number;\n  total: number;\n}\n\ninterface KeywordData {\n  word: string;\n  count: number;\n}\n\ninterface AppAnalysisResult {\n  appInfo: PlayStoreAppInfo;\n  comments: ReviewData[];\n  sentiment: SentimentData;\n  keywords: KeywordData[];\n  trends: TrendData[];\n}\n\ninterface PlayStoreReview {\n  id: string;\n  userName: string;\n  userImage: string;\n  text: string;\n  score: number;\n  thumbsUp: number;\n  version: string;\n  date: string;\n  replyText?: string;\n  replyDate?: string;\n}\n\nasync function fetchWithRetry<T>(fn: () => Promise<T>, maxRetries = 3, delay = 2000): Promise<T> {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n      await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));\n    }\n  }\n  throw new Error(\"Max retries exceeded\");\n}\n\nasync function fetchAndAnalyzeApp(url: string, year: number): Promise<AppAnalysisResult> {\n  const appId = url.split(\"id=\")[1]?.split(\"&\")[0];\n  if (!appId) {\n    throw new Error(`Invalid Play Store URL: ${url}`);\n  }\n\n  // Fetch app info\n  const appInfo = await fetchWithRetry(() => gplay.app({ appId })) as PlayStoreAppInfo;\n\n  // Calculate the date range for the specified year\n  const startDate = new Date(year, 0, 1);\n  const endDate = new Date(year + 1, 0, 1);\n\n  // Fetch reviews with pagination\n  const allReviews: PlayStoreReview[] = [];\n  let batchNum = 0;\n  const batchSize = 100;\n\n  while (true) {\n    const batch = await fetchWithRetry(() =>\n      gplay.reviews({\n        appId,\n        sort: gplay.sort.NEWEST,\n        num: batchSize,\n        paginate: true,\n        nextPaginationToken: batchNum > 0 ? String(batchNum) : undefined\n      })\n    );\n\n    if (!batch.data || batch.data.length === 0) break;\n\n    const filteredReviews = (batch.data as PlayStoreReview[]).filter(review => {\n      const reviewDate = new Date(review.date);\n      return reviewDate >= startDate && reviewDate < endDate;\n    });\n\n    if (filteredReviews.length === 0) break;\n    allReviews.push(...filteredReviews);\n    \n    if (!batch.nextPaginationToken || allReviews.length >= 1000) break;\n    batchNum++;\n    \n    // Add delay between batches\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n\n  // Analyze sentiment\n  const sentimentResults = allReviews.map(review => sentiment(review.text));\n  const sentimentCounts = sentimentResults.reduce(\n    (acc, result) => {\n      acc[result]++;\n      return acc;\n    },\n    { positive: 0, neutral: 0, negative: 0 }\n  );\n\n  // Extract keywords\n  const keywords = extractKeywords(\n    allReviews.map(review => review.text).join(\" \")\n  );\n\n  // Generate trends\n  const trends = groupByMonth(allReviews.map((review, index) => ({\n    date: review.date,\n    sentiment: sentimentResults[index]\n  })));\n\n  return {\n    appInfo,\n    comments: allReviews.map(review => ({\n      id: review.id,\n      userName: review.userName,\n      userImage: review.userImage || '',\n      content: review.text,\n      score: review.score,\n      thumbsUpCount: review.thumbsUp,\n      reviewCreatedVersion: review.version || '',\n      at: review.date,\n      replyContent: review.replyText || '',\n      repliedAt: review.replyDate || ''\n    })),\n    sentiment: sentimentCounts,\n    keywords,\n    trends\n  };\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  if (request.method !== \"POST\") {\n    return json({ error: \"Method not allowed\" }, { status: 405 });\n  }\n\n  try {\n    const formData = await request.formData();\n    const urlsJson = formData.get(\"urls\");\n    const yearStr = formData.get(\"year\");\n\n    if (!urlsJson || !yearStr) {\n      return json(\n        { error: \"Missing required parameters: urls and year\" },\n        { status: 400 }\n      );\n    }\n\n    const urls = JSON.parse(urlsJson as string);\n    const year = parseInt(yearStr as string, 10);\n\n    if (!Array.isArray(urls) || urls.length === 0) {\n      return json({ error: \"Invalid URLs parameter\" }, { status: 400 });\n    }\n\n    if (isNaN(year) || year < 2010 || year > new Date().getFullYear()) {\n      return json({ error: \"Invalid year parameter\" }, { status: 400 });\n    }\n\n    const results: Record<string, AppAnalysisResult> = {};\n\n    // Process apps sequentially to avoid rate limiting\n    for (const url of urls) {\n      try {\n        results[url] = await fetchAndAnalyzeApp(url, year);\n        // Add delay between apps\n        if (urls.indexOf(url) < urls.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      } catch (error) {\n        console.error(`Error analyzing app ${url}:`, error);\n        return json(\n          {\n            error: `Failed to analyze app: ${url}. ${\n              error instanceof Error ? error.message : \"Unknown error\"\n            }`\n          },\n          { status: 500 }\n        );\n      }\n    }\n\n    // Find shared keywords\n    const allKeywords = Object.values(results).map(result => result.keywords);\n    const sharedKeywords = allKeywords[0].filter(keyword =>\n      allKeywords.slice(1).every(keywords =>\n        keywords.some(k => k.word === keyword.word)\n      )\n    );\n\n    return json({\n      success: true,\n      results,\n      sharedKeywords\n    });\n  } catch (error) {\n    console.error(\"Comparison error:\", error);\n    return json(\n      {\n        error: `Failed to compare apps: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      },\n      { status: 500 }\n    );\n  }\n} ", "import natural from \"natural\";\n\nexport function sentiment(text: string): 'positive' | 'negative' | 'neutral' {\n  const analyzer = new natural.SentimentAnalyzer('English', natural.PorterStemmer, 'afinn');\n  const score = analyzer.getSentiment(text.split(' '));\n  \n  if (score > 0.1) return 'positive';\n  if (score < -0.1) return 'negative';\n  return 'neutral';\n} ", "export interface KeywordData {\n  word: string;\n  count: number;\n}\n\nexport function extractKeywords(text: string): KeywordData[] {\n  // Split text into words and convert to lowercase\n  const words = text.toLowerCase().split(/\\W+/);\n\n  // Filter out common words and short words\n  const stopwords = new Set([\n    'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i',\n    'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at',\n    'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she',\n    'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what',\n    'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me',\n    'app', 'apps', 'use', 'using', 'used', 'just', 'can', 'like', 'good', 'bad'\n  ]);\n\n  const filteredWords = words.filter(word => \n    word.length > 3 && \n    !stopwords.has(word) && \n    /^[a-z]+$/.test(word)\n  );\n\n  // Count word frequencies\n  const wordCounts = new Map<string, number>();\n  for (const word of filteredWords) {\n    wordCounts.set(word, (wordCounts.get(word) || 0) + 1);\n  }\n\n  // Convert to array and sort by frequency\n  return Array.from(wordCounts.entries())\n    .map(([word, count]) => ({ word, count }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 50);\n} ", "interface ReviewSentiment {\n  date: string;\n  sentiment: 'positive' | 'negative' | 'neutral';\n}\n\ninterface TrendData {\n  date: string;\n  positive: number;\n  negative: number;\n  neutral: number;\n  total: number;\n}\n\nexport function groupByMonth(reviews: ReviewSentiment[]): TrendData[] {\n  const monthlyData = new Map<string, TrendData>();\n\n  reviews.forEach(review => {\n    const date = new Date(review.date);\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n\n    if (!monthlyData.has(monthKey)) {\n      monthlyData.set(monthKey, {\n        date: monthKey,\n        positive: 0,\n        negative: 0,\n        neutral: 0,\n        total: 0\n      });\n    }\n\n    const data = monthlyData.get(monthKey)!;\n    data[review.sentiment]++;\n    data.total++;\n  });\n\n  return Array.from(monthlyData.values())\n    .sort((a, b) => a.date.localeCompare(b.date));\n} ", "import { type MetaFunction } from \"@remix-run/node\";\nimport Sidebar from \"~/components/common/Sidebar\";\nimport ComparisonDashboard from \"~/components/comparison/ComparisonDashboard\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"App Comparison - Play Store Comment Analyzer\" },\n    { name: \"description\", content: \"Compare your app with competitors\" },\n  ];\n};\n\nexport default function Comparison() {\n  return (\n    <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <Sidebar />\n      <main className=\"p-4 sm:ml-64\">\n        <div className=\"container mx-auto px-4 py-4 mt-14\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                App Comparison\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Compare your app with competitors\n              </p>\n            </div>\n          </div>\n          <ComparisonDashboard />\n        </div>\n      </main>\n    </div>\n  );\n}", "import { Link, useLocation } from \"@remix-run/react\";\nimport { HomeIcon, ChartBarIcon } from \"@heroicons/react/24/outline\";\n\nexport default function Sidebar() {\n  const location = useLocation();\n  const isActive = (path: string) => location.pathname === path;\n\n  return (\n    <aside \n      id=\"logo-sidebar\" \n      className=\"fixed top-0 left-0 z-40 w-64 h-screen pt-20 transition-transform -translate-x-full bg-white border-r border-gray-200 sm:translate-x-0 dark:bg-gray-800 dark:border-gray-700\" \n      aria-label=\"Sidebar\"\n    >\n      <div className=\"h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-800\">\n        <ul className=\"space-y-2 font-medium\">\n          {[\n            { path: \"/\", icon: HomeIcon, label: \"Dashboard\" },\n            { path: \"/comparison\", icon: ChartBarIcon, label: \"App Comparison\" }\n          ].map((item) => (\n            <li key={item.path}>\n              <Link\n                to={item.path}\n                className={`flex items-center p-2 text-gray-900 rounded-lg dark:text-white ${\n                  isActive(item.path)\n                    ? \"bg-gray-100 dark:bg-gray-700\"\n                    : \"hover:bg-gray-100 dark:hover:bg-gray-700\"\n                } group`}\n              >\n                <item.icon className=\"w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white\" />\n                <span className=\"ms-3\">{item.label}</span>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </aside>\n  );\n}\n", "import { useState } from \"react\";\nimport { Card, Spinner, Alert } from \"flowbite-react\";\nimport { InformationCircleIcon } from \"@heroicons/react/24/outline\";\nimport AppComparisonForm from \"./AppComparisonForm\";\nimport MetricsComparison from \"./MetricsComparison\";\nimport KeywordsComparison from \"./KeywordsComparison\";\nimport SentimentDistribution from \"./SentimentDistribution\";\nimport TrendAnalysis from \"./TrendAnalysis\";\nimport RecentComments from \"./RecentComments\";\nimport ExportButton from \"./ExportButton\";\n\nexport interface AppData {\n  id: string;\n  name: string;\n  icon: string;\n  metrics: {\n    averageRating: number;\n    totalReviews: number;\n  };\n  sentiments: {\n    positive: number;\n    neutral: number;\n    negative: number;\n  };\n  keywords: Array<{\n    word: string;\n    count: number;\n  }>;\n  comments: Array<{\n    id: string;\n    userName: string;\n    content: string;\n    score: number;\n    date: string;\n    sentiment: 'positive' | 'negative' | 'neutral';\n  }>;\n  trends: Array<{\n    date: string;\n    positive: number;\n    negative: number;\n    neutral: number;\n    total: number;\n  }>;\n}\n\ninterface SharedKeyword {\n  word: string;\n  counts: { [appId: string]: number };\n}\n\nexport default function ComparisonDashboard() {\n  const [apps, setApps] = useState<AppData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [sharedKeywords, setSharedKeywords] = useState<SharedKeyword[]>([]);\n  \n  const handleAddApps = async (appUrls: string[], year: number) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const formData = new FormData();\n      formData.append('urls', JSON.stringify(appUrls));\n      formData.append('year', year.toString());\n\n      const response = await fetch('/api/compare', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch comparison data');\n      }\n\n      const data = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.error || 'Failed to analyze apps');\n      }\n\n      // Transform the API response into the format we need\n      const appsData = Object.entries(data.results).map(([url, result]: [string, any]) => ({\n        id: url,\n        name: result.appInfo?.title || url.split('id=')[1]?.split('&')[0] || url,\n        icon: result.appInfo?.icon || `https://www.google.com/s2/favicons?domain=${url}&sz=64`,\n        metrics: {\n          averageRating: result.comments?.reduce((acc: number, c: any) => acc + c.score, 0) / (result.comments?.length || 1) || 0,\n          totalReviews: result.comments?.length || 0,\n        },\n        sentiments: {\n          positive: result.sentiment?.positive || 0,\n          neutral: result.sentiment?.neutral || 0,\n          negative: result.sentiment?.negative || 0\n        },\n        keywords: result.keywords || [],\n        comments: result.comments || [],\n        trends: result.trends || []\n      }));\n\n      setApps(appsData);\n\n      // Transform shared keywords data\n      const transformedSharedKeywords = (data.comparisonResult?.sharedKeywords || data.sharedKeywords || []).map((kw: any) => ({\n        word: kw.word,\n        counts: appsData.reduce((acc: { [key: string]: number }, app) => {\n          acc[app.id] = kw.counts?.[app.id] || 0;\n          return acc;\n        }, {})\n      }));\n\n      setSharedKeywords(transformedSharedKeywords);\n    } catch (err: any) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch app data');\n      console.error('Comparison error:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRemoveApp = (appId: string) => {\n    setApps(prevApps => prevApps.filter(app => app.id !== appId));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Form Card */}\n        <Card className=\"lg:col-span-2\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-bold tracking-tight text-gray-900\">\n                Compare Apps\n              </h2>\n              <p className=\"text-base text-gray-500\">\n                Enter Play Store URLs to compare apps\n              </p>\n            </div>\n            {apps.length > 0 && <ExportButton data={{ apps, sharedKeywords }} />}\n          </div>\n          <AppComparisonForm onSubmit={handleAddApps} />\n        </Card>\n\n        {error && (\n          <Alert color=\"failure\" icon={InformationCircleIcon} className=\"lg:col-span-2\">\n            {error}\n          </Alert>\n        )}\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-12 lg:col-span-2\">\n            <Spinner size=\"xl\" />\n          </div>\n        ) : apps.length > 0 ? (\n          <>\n            {/* Metrics Overview */}\n            <Card className=\"lg:col-span-2\">\n              <MetricsComparison apps={apps} onRemoveApp={handleRemoveApp} />\n            </Card>\n\n            {/* Trend Analysis */}\n            <Card>\n              <TrendAnalysis apps={apps} />\n            </Card>\n\n            {/* Sentiment Distribution */}\n            <Card>\n              <SentimentDistribution apps={apps} />\n            </Card>\n\n            {/* Keywords Comparison */}\n            <Card className=\"lg:col-span-2\">\n              <KeywordsComparison apps={apps} sharedKeywords={sharedKeywords} />\n            </Card>\n\n            {/* Recent Comments */}\n            <Card className=\"lg:col-span-2\">\n              <RecentComments apps={apps} />\n            </Card>\n          </>\n        ) : (\n          <Alert \n            color=\"info\" \n            icon={InformationCircleIcon}\n            className=\"lg:col-span-2\"\n            theme={{\n              color: {\n                info: \"border border-blue-500 bg-blue-50 text-blue-900 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-800\"\n              }\n            }}\n          >\n            <div className=\"flex flex-col gap-2\">\n              <h3 className=\"text-lg font-medium\">\n                Add app URLs to start comparing\n              </h3>\n              <p className=\"text-sm\">\n                You can find app URLs by visiting their Play Store pages and copying the URL from your browser's address bar.\n              </p>\n            </div>\n          </Alert>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { useState } from \"react\";\nimport { Button, Label, TextInput, Select } from \"flowbite-react\";\n\ninterface AppComparisonFormProps {\n  onSubmit: (urls: string[], year: number) => void;\n}\n\nconst isValidPlayStoreUrl = (url: string): boolean => {\n  const pattern = /^https:\\/\\/play\\.google\\.com\\/store\\/apps\\/details\\?id=[a-zA-Z0-9_.]+(&.*)?$/;\n  return pattern.test(url.trim());\n};\n\nexport default function AppComparisonForm({ onSubmit }: AppComparisonFormProps) {\n  const [competitorUrls, setCompetitorUrls] = useState<string[]>([\"\", \"\"]);\n  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const validUrls = competitorUrls.filter(url => url.trim() !== \"\");\n    if (validUrls.length > 0) {\n      onSubmit(validUrls, selectedYear);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid gap-4\">\n        {competitorUrls.map((url, index) => (\n          <div key={index}>\n            <div className=\"mb-2\">\n              <Label htmlFor={`app-${index}`}>\n                {index === 0 ? \"Main App URL\" : `Competitor ${index} URL`}\n              </Label>\n            </div>\n            <TextInput\n              id={`app-${index}`}\n              type=\"url\"\n              placeholder=\"https://play.google.com/store/apps/details?id=...\"\n              value={url}\n              onChange={(e) => {\n                const newUrls = [...competitorUrls];\n                newUrls[index] = e.target.value;\n                setCompetitorUrls(newUrls);\n              }}\n              required={index === 0}\n              color=\"gray\"\n              helperText={index === 0 ? \"Enter your app's Play Store URL\" : \"Enter competitor's Play Store URL\"}\n            />\n          </div>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-2\">\n            <Label htmlFor=\"year\">Filter by Year</Label>\n          </div>\n          <Select\n            id=\"year\"\n            value={selectedYear}\n            onChange={(e) => setSelectedYear(Number(e.target.value))}\n          >\n            <option value={2024}>2024</option>\n            <option value={2023}>2023</option>\n            <option value={2022}>2022</option>\n            <option value={2021}>2021</option>\n          </Select>\n        </div>\n        <div className=\"flex items-end\">\n          <Button type=\"submit\" color=\"blue\" className=\"h-[42px]\">\n            Compare Apps\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n", "import { useMemo } from \"react\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell,\n  LineChart, Line\n} from \"recharts\";\nimport { Card, Button } from \"flowbite-react\";\nimport { XMarkIcon, StarIcon } from \"@heroicons/react/24/solid\";\nimport type { AppData } from \"./ComparisonDashboard\";\nimport SentimentDistributionCard from \"./SentimentDistributionCard\";\n\ninterface MetricsComparisonProps {\n  apps: AppData[];\n  onRemoveApp: (appId: string) => void;\n}\n\nexport default function MetricsComparison({ apps, onRemoveApp }: MetricsComparisonProps) {\n  const primaryApp = apps[0];\n  \n  // Calculate percentage differences from the primary app\n  const percentageDiffs = useMemo(() => {\n    return apps.map(app => {\n      if (app.id === primaryApp.id) return null;\n      \n      return {\n        averageRating: ((app.metrics.averageRating - primaryApp.metrics.averageRating) / primaryApp.metrics.averageRating) * 100,\n        totalReviews: ((app.metrics.totalReviews - primaryApp.metrics.totalReviews) / primaryApp.metrics.totalReviews) * 100,\n        sentimentPositive: ((app.sentiments.positive - primaryApp.sentiments.positive) / primaryApp.sentiments.positive) * 100,\n        sentimentNeutral: ((app.sentiments.neutral - primaryApp.sentiments.neutral) / primaryApp.sentiments.neutral) * 100,\n        sentimentNegative: ((app.sentiments.negative - primaryApp.sentiments.negative) / primaryApp.sentiments.negative) * 100\n      };\n    });\n  }, [apps, primaryApp]);\n\n  // Format percentage difference with + or - sign\n  const formatDiff = (diff: number | null | undefined) => {\n    if (diff === null || diff === undefined) return '';\n    return `${diff > 0 ? '+' : ''}${diff.toFixed(1)}%`;\n  };\n\n  // Determine color class based on diff value and metric type\n  const getDiffColorClass = (diff: number | null | undefined, isNegativeGood = false) => {\n    if (diff === null || diff === undefined) return '';\n    \n    const isPositive = diff > 0;\n    const isGood = isNegativeGood ? !isPositive : isPositive;\n    \n    return isGood ? 'text-green-600' : 'text-red-600';\n  };\n\n  // Prepare data for charts\n  const chartData = useMemo(() => {\n    return {\n      ratings: apps.map(app => ({\n        name: app.name,\n        rating: app.metrics.averageRating,\n        color: app.id === primaryApp.id ? '#3B82F6' : '#10B981',\n        diff: app.id === primaryApp.id ? 0 : ((app.metrics.averageRating - primaryApp.metrics.averageRating) / primaryApp.metrics.averageRating) * 100\n      })),\n      reviews: apps.map(app => ({\n        name: app.name,\n        reviews: app.metrics.totalReviews,\n        color: app.id === primaryApp.id ? '#3B82F6' : '#10B981',\n        diff: app.id === primaryApp.id ? 0 : ((app.metrics.totalReviews - primaryApp.metrics.totalReviews) / primaryApp.metrics.totalReviews) * 100\n      }))\n    };\n  }, [apps, primaryApp]);\n\n  const appColors = useMemo(() => {\n    const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n    return apps.reduce((acc, app, index) => {\n      acc[app.id] = colors[index % colors.length];\n      return acc;\n    }, {} as { [key: string]: string });\n  }, [apps]);\n\n  return (\n    <Card>\n      <div className=\"border-b border-gray-200 dark:border-gray-700 pb-4\">\n        <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">\n          Metrics Comparison\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n          Compare key metrics between apps\n        </p>\n      </div>\n\n      {/* App Headers with Icons */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {apps.map((app, index) => (\n          <Card key={app.id} className={index === 0 ? 'bg-blue-50 dark:bg-blue-900/30' : 'bg-gray-50 dark:bg-gray-700/30'}>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"relative\">\n                <img \n                  src={app.icon} \n                  alt={`${app.name} icon`}\n                  className=\"w-16 h-16 rounded-lg shadow-sm\" \n                />\n                {index > 0 && (\n                  <Button\n                    onClick={() => onRemoveApp(app.id)}\n                    className=\"absolute -top-2 -right-2 !p-1\"\n                    color=\"failure\"\n                    pill\n                    size=\"xs\"\n                  >\n                    <XMarkIcon className=\"w-3 h-3\" />\n                  </Button>\n                )}\n              </div>\n              <h3 className=\"mt-3 font-medium text-center text-gray-800 dark:text-white truncate max-w-full\">\n                {app.name}\n              </h3>\n              {index === 0 && (\n                <span className=\"mt-1 inline-block px-2 py-1 text-xs bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full\">\n                  Your App\n                </span>\n              )}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Ratings Chart */}\n      <Card className=\"mt-6\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Average Rating</h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData.ratings}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis domain={[0, 5]} />\n              <Tooltip\n                formatter={(value, name) => {\n                  if (name === 'rating') {\n                    return [`${value} \u2605`, 'Rating'];\n                  }\n                  return [value, name];\n                }}\n                labelFormatter={(name) => `App: ${name}`}\n              />\n              <Legend />\n              <Bar dataKey=\"rating\" name=\"Rating\" radius={[4, 4, 0, 0]}>\n                {chartData.ratings.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        {/* Rating Comparison Table */}\n        <div className=\"mt-4 overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  App\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Rating\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Difference\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {chartData.ratings.map((app, index) => (\n                <tr key={`rating-${app.name}`}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                    {app.name} {index === 0 && <span className=\"ml-2 text-xs text-blue-600\">(Your App)</span>}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {app.rating.toFixed(1)} \u2605\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {index === 0 ? (\n                      <span className=\"text-gray-400\">-</span>\n                    ) : (\n                      <span className={getDiffColorClass(app.diff)}>\n                        {formatDiff(app.diff)}\n                      </span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Reviews Chart */}\n      <Card className=\"mt-6\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Total Reviews</h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart\n              data={chartData.reviews}\n              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip\n                formatter={(value) => [value.toLocaleString(), 'Reviews']}\n                labelFormatter={(name) => `App: ${name}`}\n              />\n              <Legend />\n              <Bar dataKey=\"reviews\" name=\"Reviews\" radius={[4, 4, 0, 0]}>\n                {chartData.reviews.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        {/* Reviews Comparison Table */}\n        <div className=\"mt-4 overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  App\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Total Reviews\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Difference\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {chartData.reviews.map((app, index) => (\n                <tr key={`reviews-${app.name}`}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                    {app.name} {index === 0 && <span className=\"ml-2 text-xs text-blue-600\">(Your App)</span>}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {app.reviews.toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {index === 0 ? (\n                      <span className=\"text-gray-400\">-</span>\n                    ) : (\n                      <span className={getDiffColorClass(app.diff)}>\n                        {formatDiff(app.diff)}\n                      </span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Sentiment Distribution */}\n      <SentimentDistributionCard apps={apps} percentageDiffs={percentageDiffs} />\n    </Card>\n  );\n}", "import { Card, Progress } from \"flowbite-react\";\nimport type { AppData } from \"./ComparisonDashboard\";\n\ninterface SentimentDistributionCardProps {\n  apps: AppData[];\n  percentageDiffs: Array<{\n    sentimentPositive: number;\n    sentimentNeutral: number;\n    sentimentNegative: number;\n  } | null>;\n}\n\nconst formatDiff = (diff: number | null | undefined) => {\n  if (diff === null || diff === undefined) return '';\n  return `${diff > 0 ? '+' : ''}${diff.toFixed(1)}%`;\n};\n\nconst getDiffColorClass = (diff: number | null | undefined, isNegativeGood = false) => {\n  if (diff === null || diff === undefined) return '';\n  \n  const isPositive = diff > 0;\n  const isGood = isNegativeGood ? !isPositive : isPositive;\n  \n  return isGood ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n};\n\nexport default function SentimentDistributionCard({ apps, percentageDiffs }: SentimentDistributionCardProps) {\n  return (\n    <Card className=\"mt-6\">\n      <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Sentiment Distribution</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {apps.map((app, index) => (\n          <Card key={`sentiment-${app.id}`} className=\"bg-gray-50 dark:bg-gray-700\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h4 className=\"font-medium text-gray-800 dark:text-white\">\n                {app.name}\n              </h4>\n              {index === 0 && (\n                <span className=\"inline-block px-2 py-1 text-xs bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full\">\n                  Your App\n                </span>\n              )}\n            </div>\n            \n            {/* Sentiment Bars */}\n            <div className=\"space-y-3\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">Positive</span>\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">{app.metrics.sentimentDistribution.positive}%</span>\n                    {index > 0 && (\n                      <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentPositive)}`}>\n                        ({formatDiff(percentageDiffs[index]?.sentimentPositive)})\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <Progress\n                  progress={app.metrics.sentimentDistribution.positive}\n                  color=\"success\"\n                  size=\"sm\"\n                />\n              </div>\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">Neutral</span>\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">{app.metrics.sentimentDistribution.neutral}%</span>\n                    {index > 0 && (\n                      <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentNeutral)}`}>\n                        ({formatDiff(percentageDiffs[index]?.sentimentNeutral)})\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <Progress\n                  progress={app.metrics.sentimentDistribution.neutral}\n                  color=\"warning\"\n                  size=\"sm\"\n                />\n              </div>\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">Negative</span>\n                  <div className=\"flex items-center\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">{app.metrics.sentimentDistribution.negative}%</span>\n                    {index > 0 && (\n                      <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentNegative, true)}`}>\n                        ({formatDiff(percentageDiffs[index]?.sentimentNegative)})\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <Progress\n                  progress={app.metrics.sentimentDistribution.negative}\n                  color=\"failure\"\n                  size=\"sm\"\n                />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </Card>\n  );\n} ", "import { Card, Badge } from \"flowbite-react\";\nimport { AppData } from \"./ComparisonDashboard\";\nimport { useMemo } from \"react\";\n\ninterface KeywordsComparisonProps {\n  apps: AppData[];\n}\n\nexport default function KeywordsComparison({ apps }: KeywordsComparisonProps) {\n  // Find shared keywords between apps\n  const sharedKeywords = useMemo(() => {\n    const keywordMap = new Map<string, { word: string; counts: { [appId: string]: number } }>();\n\n    apps.forEach(app => {\n      app.keywords.forEach(({ word, count }) => {\n        if (!keywordMap.has(word)) {\n          keywordMap.set(word, { word, counts: {} });\n        }\n        keywordMap.get(word)!.counts[app.id] = count;\n      });\n    });\n\n    // Filter keywords that appear in at least 2 apps and sort by total count\n    return Array.from(keywordMap.values())\n      .filter(keyword => Object.keys(keyword.counts).length >= 2)\n      .sort((a, b) => {\n        const totalA = Object.values(a.counts).reduce((sum, count) => sum + count, 0);\n        const totalB = Object.values(b.counts).reduce((sum, count) => sum + count, 0);\n        return totalB - totalA;\n      });\n  }, [apps]);\n\n  if (!apps?.length || !sharedKeywords.length) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <div>\n        <h3 className=\"text-lg font-medium mb-1 text-gray-900\">\n          Top Keywords\n        </h3>\n        <p className=\"text-sm text-gray-500 mb-6\">\n          Common keywords across all apps\n        </p>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {sharedKeywords.map((keyword) => (\n            <Card key={keyword.word} className=\"bg-gray-50\">\n              <div>\n                <Badge color=\"info\" size=\"lg\" className=\"mb-4\">\n                  {keyword.word}\n                </Badge>\n                <div className=\"space-y-3\">\n                  {apps.map((app) => (\n                    keyword.counts[app.id] ? (\n                      <div key={app.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <img\n                            src={app.icon}\n                            alt={`${app.name} icon`}\n                            className=\"w-6 h-6 rounded\"\n                          />\n                          <span className=\"text-sm text-gray-600 truncate max-w-[200px]\">\n                            {app.name}\n                          </span>\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {keyword.counts[app.id].toLocaleString()}\n                        </span>\n                      </div>\n                    ) : null\n                  ))}\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n} ", "import { Card } from \"flowbite-react\";\nimport { AppData } from \"./ComparisonDashboard\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartData,\n  ChartOptions\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface SentimentDistributionProps {\n  apps: AppData[];\n}\n\nconst chartColors = [\n  { bar: 'rgb(37, 99, 235)', hover: 'rgb(29, 78, 216)' },   // Blue\n  { bar: 'rgb(234, 88, 12)', hover: 'rgb(194, 65, 12)' },   // Orange\n  { bar: 'rgb(22, 163, 74)', hover: 'rgb(21, 128, 61)' },   // Green\n  { bar: 'rgb(217, 70, 239)', hover: 'rgb(192, 38, 211)' }  // Purple\n];\n\nexport default function SentimentDistribution({ apps }: SentimentDistributionProps) {\n  const chartData: ChartData<'bar'> = {\n    labels: ['Positive', 'Neutral', 'Negative'],\n    datasets: apps.map((app, index) => ({\n      label: app.name,\n      data: [\n        app.sentiments.positive,\n        app.sentiments.neutral,\n        app.sentiments.negative\n      ],\n      backgroundColor: chartColors[index].bar,\n      hoverBackgroundColor: chartColors[index].hover,\n      borderRadius: 4,\n      borderSkipped: false,\n      barPercentage: 0.7,\n      categoryPercentage: 0.8\n    }))\n  };\n\n  const options: ChartOptions<'bar'> = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          padding: 20,\n          usePointStyle: true,\n          pointStyle: 'circle'\n        }\n      },\n      title: {\n        display: false\n      },\n      tooltip: {\n        backgroundColor: 'white',\n        titleColor: '#111827',\n        bodyColor: '#111827',\n        borderColor: '#e5e7eb',\n        borderWidth: 1,\n        padding: 12,\n        boxPadding: 6,\n        usePointStyle: true,\n        callbacks: {\n          label: (context) => ` ${context.dataset.label}: ${context.parsed.y.toLocaleString()}`\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          padding: 10\n        }\n      },\n      y: {\n        beginAtZero: true,\n        border: {\n          display: false\n        },\n        grid: {\n          color: '#e5e7eb'\n        },\n        ticks: {\n          padding: 10,\n          callback: function(value) {\n            return value.toLocaleString();\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-medium mb-1 text-gray-900\">\n        Sentiment Distribution\n      </h3>\n      <p className=\"text-sm text-gray-500 mb-6\">\n        Compare sentiment distribution across apps\n      </p>\n\n      <div className=\"h-[400px]\">\n        <Bar data={chartData} options={options} />\n      </div>\n    </div>\n  );\n} ", "import { Card } from \"flowbite-react\";\nimport { AppData } from \"./ComparisonDashboard\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartData,\n  ChartOptions,\n  Filler\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface TrendAnalysisProps {\n  apps: AppData[];\n}\n\nconst chartColors = [\n  { line: 'rgb(37, 99, 235)', fill: 'rgba(37, 99, 235, 0.1)' },   // Blue\n  { line: 'rgb(234, 88, 12)', fill: 'rgba(234, 88, 12, 0.1)' },   // Orange\n  { line: 'rgb(22, 163, 74)', fill: 'rgba(22, 163, 74, 0.1)' },   // Green\n  { line: 'rgb(217, 70, 239)', fill: 'rgba(217, 70, 239, 0.1)' }  // Purple\n];\n\nexport default function TrendAnalysis({ apps }: TrendAnalysisProps) {\n  const chartData: ChartData<'line'> = {\n    labels: apps[0]?.trends.map(trend => new Date(trend.date).toLocaleDateString()) || [],\n    datasets: apps.map((app, index) => ({\n      label: app.name,\n      data: app.trends.map(trend => trend.total),\n      borderColor: chartColors[index].line,\n      backgroundColor: chartColors[index].fill,\n      tension: 0.4,\n      fill: true,\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      pointBackgroundColor: chartColors[index].line,\n      pointBorderColor: 'white',\n      pointBorderWidth: 2,\n      borderWidth: 2\n    }))\n  };\n\n  const options: ChartOptions<'line'> = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index',\n      intersect: false,\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          padding: 20,\n          usePointStyle: true,\n          pointStyle: 'circle'\n        }\n      },\n      title: {\n        display: false\n      },\n      tooltip: {\n        backgroundColor: 'white',\n        titleColor: '#111827',\n        bodyColor: '#111827',\n        borderColor: '#e5e7eb',\n        borderWidth: 1,\n        padding: 12,\n        boxPadding: 6,\n        usePointStyle: true,\n        callbacks: {\n          label: (context) => ` ${context.dataset.label}: ${context.parsed.y.toLocaleString()}`\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          padding: 10\n        }\n      },\n      y: {\n        beginAtZero: true,\n        border: {\n          display: false\n        },\n        grid: {\n          color: '#e5e7eb'\n        },\n        ticks: {\n          padding: 10,\n          callback: function(value) {\n            return value.toLocaleString();\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <Card className=\"mt-6\">\n      <div>\n        <h3 className=\"text-lg font-medium mb-1 text-gray-800 dark:text-white\">\n          Trend Analysis\n        </h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n          Review volume trends over time\n        </p>\n\n        <div className=\"h-[400px]\">\n          <Line data={chartData} options={options} />\n        </div>\n      </div>\n    </Card>\n  );\n} ", "import { Card, Badge } from \"flowbite-react\";\nimport { AppData } from \"./ComparisonDashboard\";\nimport { useMemo } from \"react\";\n\ninterface RecentCommentsProps {\n  apps: AppData[];\n}\n\nexport default function RecentComments({ apps }: RecentCommentsProps) {\n  // Combine and sort comments from all apps\n  const sortedComments = useMemo(() => {\n    return apps\n      .flatMap(app => \n        app.comments.map(comment => ({\n          ...comment,\n          appName: app.name,\n          appIcon: app.icon\n        }))\n      )\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, 10); // Show only the 10 most recent comments\n  }, [apps]);\n\n  if (!apps?.length || !sortedComments.length) {\n    return null;\n  }\n\n  const getSentimentColor = (sentiment: 'positive' | 'negative' | 'neutral') => {\n    switch (sentiment) {\n      case 'positive':\n        return 'success';\n      case 'negative':\n        return 'failure';\n      default:\n        return 'gray';\n    }\n  };\n\n  return (\n    <Card>\n      <div>\n        <h3 className=\"text-lg font-medium mb-1 text-gray-900\">\n          Recent Comments\n        </h3>\n        <p className=\"text-sm text-gray-500 mb-6\">\n          Latest comments from all apps\n        </p>\n\n        <div className=\"space-y-4\">\n          {sortedComments.map((comment) => (\n            <Card key={comment.id} className=\"bg-gray-50\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <img\n                      src={comment.appIcon}\n                      alt={`${comment.appName} icon`}\n                      className=\"w-6 h-6 rounded\"\n                    />\n                    <span className=\"text-sm font-medium text-gray-900\">\n                      {comment.appName}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <Badge color={getSentimentColor(comment.sentiment)}>\n                      {comment.sentiment}\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">\n                      {new Date(comment.date).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {comment.content}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-500\">\n                    {comment.userName}\n                  </span>\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-sm font-medium text-gray-900\">\n                      {comment.score.toFixed(1)}\n                    </span>\n                    <span className=\"text-sm text-gray-500\">\u2605</span>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n} ", "import { Button } from \"flowbite-react\";\nimport { AppData } from \"./ComparisonDashboard\";\n\ninterface ExportButtonProps {\n  apps: AppData[];\n}\n\nexport default function ExportButton({ apps }: ExportButtonProps) {\n  const handleExport = () => {\n    const exportData = apps.map(app => ({\n      name: app.name,\n      metrics: {\n        averageRating: app.metrics.averageRating,\n        totalReviews: app.metrics.totalReviews\n      },\n      sentiments: {\n        positive: app.sentiments.positive,\n        neutral: app.sentiments.neutral,\n        negative: app.sentiments.negative\n      },\n      keywords: app.keywords,\n      comments: app.comments,\n      trends: app.trends\n    }));\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n      type: \"application/json\"\n    });\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"app-comparison-data.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Button onClick={handleExport} color=\"gray\">\n      Export Data\n    </Button>\n  );\n} ", "import { type MetaFunction } from \"@remix-run/node\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport { useFetcher, Link, useLocation } from \"@remix-run/react\";\nimport natural from \"natural\";\nimport { \n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  ReferenceLine, ReferenceArea, Brush\n} from \"recharts\";\nimport { format, parseISO, startOfDay, startOfWeek, startOfMonth, startOfQuarter, isSameDay, isSameWeek, isSameMonth, isSameQuarter } from \"date-fns\";\nimport ComparisonDashboard from \"~/components/ComparisonDashboard\";\nimport Sidebar from \"~/components/common/Sidebar\";\nimport { Label, TextInput, Select, Button } from \"flowbite-react\";\n\nexport interface Comment {\n  id: string;\n  userName: string;\n  content: string;\n  score: number;\n  thumbsUp: number;\n  date: string;\n  year: number;\n  sentiment: 'positive' | 'negative' | 'neutral';\n}\n\nexport interface AnalysisResult {\n  comments: Comment[];\n  sentiment: {\n    positive: number;\n    negative: number;\n    neutral: number;\n  };\n  keywords: { word: string; count: number }[];\n  intentions: {\n    feature_request: Comment[];\n    bug_report: Comment[];\n    praise: Comment[];\n    complaint: Comment[];\n  };\n  error?: string;\n  message?: string;\n}\n\ninterface TrendDataPoint {\n  date: string;\n  positive: number;\n  negative: number;\n  neutral: number;\n  total: number;\n  featureRequests: number;\n  bugReports: number;\n}\n\ninterface AppRelease {\n  date: string;\n  version: string;\n  notes?: string;\n}\n\ninterface TrendTimeframe {\n  label: string;\n  value: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n  groupingFn: (date: Date) => Date;\n  formatFn: (date: Date) => string;\n  isSamePeriodFn: (date1: Date, date2: Date) => boolean;\n}\n\n// InsightItem component for displaying trend insights\ninterface InsightItemProps {\n  change: {\n    period: string;\n    metric: 'positive' | 'negative' | 'total' | 'featureRequests' | 'bugReports';\n    change: number;\n    isIncrease: boolean;\n  };\n  appReleases: AppRelease[];\n}\n\nfunction InsightItem({ change, appReleases }: InsightItemProps) {\n  const getMetricLabel = (metric: 'positive' | 'negative' | 'total' | 'featureRequests' | 'bugReports') => {\n    switch (metric) {\n      case 'positive': return 'positive sentiment';\n      case 'negative': return 'negative sentiment';\n      case 'total': return 'comment volume';\n      case 'featureRequests': return 'feature requests';\n      case 'bugReports': return 'bug reports';\n    }\n  };\n  \n  const changeText = change.isIncrease ? 'increase' : 'decrease';\n  const changeValue = Math.abs(change.change);\n  const formattedChange = change.metric === 'positive' || change.metric === 'negative'\n    ? `${(changeValue * 100).toFixed(1)}%`\n    : `${(changeValue * 100).toFixed(1)}%`;\n  \n  const isNearRelease = appReleases.some(release => {\n    const releaseDate = new Date(release.date);\n    const periodDate = new Date(change.period);\n    const diffTime = Math.abs(periodDate.getTime() - releaseDate.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays <= 14; // Within 2 weeks\n  });\n  \n  return (\n    <div className=\"flex items-start space-x-2\">\n      <div className={`flex-shrink-0 w-4 h-4 mt-0.5 rounded-full ${\n        change.isIncrease \n          ? (change.metric === 'negative' || change.metric === 'bugReports' ? 'bg-red-500' : 'bg-green-500')\n          : (change.metric === 'negative' || change.metric === 'bugReports' ? 'bg-green-500' : 'bg-red-500')\n      }`} />\n      <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n        <span className=\"font-medium\">{formattedChange} {changeText}</span> in {getMetricLabel(change.metric)} during {change.period}.\n        {isNearRelease && (\n          <span className=\"ml-1 text-blue-600 dark:text-blue-400\">\n            May be related to recent app update.\n          </span>\n        )}\n      </p>\n    </div>\n  );\n}\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Play Store Comment Analyzer\" },\n    { name: \"description\", content: \"Analyze Play Store comments with ease\" },\n  ];\n};\n\nexport default function Index() {\n  const location = useLocation();\n  const [url, setUrl] = useState(\"\");\n  const [year, setYear] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [modalSearchTerm, setModalSearchTerm] = useState(\"\");\n  const [showAllComments, setShowAllComments] = useState(false);\n  const [sentimentFilter, setSentimentFilter] = useState(\"all\");\n  const [ratingFilter, setRatingFilter] = useState(\"all\");\n  const [showExportDropdown, setShowExportDropdown] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportNotification, setExportNotification] = useState<{show: boolean, message: string}>({show: false, message: ''});\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(5);\n  const [searchResultsCount, setSearchResultsCount] = useState(0);\n  \n  // Trend analysis state\n  const [timeGranularity, setTimeGranularity] = useState<'daily' | 'weekly' | 'monthly' | 'quarterly'>('weekly');\n  const [dateRange, setDateRange] = useState<{start: string | null, end: string | null}>({start: null, end: null});\n  const [showAllTime, setShowAllTime] = useState(true);\n  const [visibleMetrics, setVisibleMetrics] = useState({\n    positive: true,\n    negative: true,\n    neutral: true,\n    total: true,\n    featureRequests: true,\n    bugReports: true\n  });\n  const [appReleases, setAppReleases] = useState<AppRelease[]>([\n    // Example releases - in a real app, these would be fetched from an API\n    { date: '2023-12-15', version: '2.1.0', notes: 'Major UI redesign' },\n    { date: '2024-01-30', version: '2.2.0', notes: 'New features added' },\n    { date: '2024-03-10', version: '2.3.0', notes: 'Bug fixes and performance improvements' }\n  ]);\n  \n  const exportDropdownRef = useRef<HTMLDivElement>(null);\n  const exportButtonRef = useRef<HTMLButtonElement>(null);\n  const fetcher = useFetcher<AnalysisResult>();\n  const isLoading = fetcher.state !== \"idle\";\n  const hasData = fetcher.data && !('error' in fetcher.data) && fetcher.data.comments;\n  const error = fetcher.data?.error || fetcher.data?.message;\n\n  // Time granularity options\n  const timeframeOptions: TrendTimeframe[] = useMemo(() => [\n    { \n      label: 'Daily', \n      value: 'daily', \n      groupingFn: startOfDay,\n      formatFn: (date) => format(date, 'MMM d, yyyy'),\n      isSamePeriodFn: isSameDay\n    },\n    { \n      label: 'Weekly', \n      value: 'weekly', \n      groupingFn: startOfWeek,\n      formatFn: (date) => `Week of ${format(date, 'MMM d, yyyy')}`,\n      isSamePeriodFn: isSameWeek\n    },\n    { \n      label: 'Monthly', \n      value: 'monthly', \n      groupingFn: startOfMonth,\n      formatFn: (date) => format(date, 'MMMM yyyy'),\n      isSamePeriodFn: isSameMonth\n    },\n    { \n      label: 'Quarterly', \n      value: 'quarterly', \n      groupingFn: startOfQuarter,\n      formatFn: (date) => `Q${Math.floor(date.getMonth() / 3) + 1} ${date.getFullYear()}`,\n      isSamePeriodFn: isSameQuarter\n    }\n  ], []);\n\n  // Get current timeframe settings\n  const currentTimeframe = useMemo(() => \n    timeframeOptions.find(t => t.value === timeGranularity) || timeframeOptions[1], \n    [timeGranularity, timeframeOptions]\n  );\n\n  // Process comments data for trend analysis\n  const trendData = useMemo(() => {\n    if (!hasData || !fetcher.data?.comments) return [];\n    \n    const comments = fetcher.data.comments;\n    const intentions = fetcher.data.intentions;\n    \n    // Group comments by time period\n    const groupedData = new Map<string, TrendDataPoint>();\n    \n    comments.forEach(comment => {\n      const commentDate = parseISO(comment.date);\n      const periodStart = currentTimeframe.groupingFn(commentDate);\n      const periodKey = format(periodStart, 'yyyy-MM-dd');\n      \n      if (!groupedData.has(periodKey)) {\n        groupedData.set(periodKey, {\n          date: currentTimeframe.formatFn(periodStart),\n          positive: 0,\n          negative: 0,\n          neutral: 0,\n          total: 0,\n          featureRequests: 0,\n          bugReports: 0\n        });\n      }\n      \n      const dataPoint = groupedData.get(periodKey)!;\n      dataPoint.total += 1;\n      \n      // Count by sentiment\n      if (comment.sentiment === 'positive') dataPoint.positive += 1;\n      else if (comment.sentiment === 'negative') dataPoint.negative += 1;\n      else dataPoint.neutral += 1;\n      \n      // Count intentions\n      if (intentions?.feature_request.some(c => c.id === comment.id)) {\n        dataPoint.featureRequests += 1;\n      }\n      if (intentions?.bug_report.some(c => c.id === comment.id)) {\n        dataPoint.bugReports += 1;\n      }\n    });\n    \n    // Convert to array and sort by date\n    return Array.from(groupedData.entries())\n      .map(([key, value]) => ({\n        ...value,\n        rawDate: key // Keep the raw date for sorting\n      }))\n      .sort((a, b) => a.rawDate.localeCompare(b.rawDate))\n      .map(({ rawDate, ...rest }) => rest); // Remove the rawDate property\n  }, [hasData, fetcher.data, currentTimeframe]);\n\n  // Detect significant changes in the trend data\n  const significantChanges = useMemo(() => {\n    if (trendData.length < 2) return [];\n    \n    const changes: Array<{\n      period: string;\n      metric: 'positive' | 'negative' | 'total' | 'featureRequests' | 'bugReports';\n      change: number;\n      isIncrease: boolean;\n    }> = [];\n    const thresholds = {\n      positive: 0.2, // 20% change\n      negative: 0.2,\n      total: 0.3,     // 30% change in volume\n      featureRequests: 0.5, // 50% change\n      bugReports: 0.5\n    };\n    \n    for (let i = 1; i < trendData.length; i++) {\n      const current = trendData[i];\n      const previous = trendData[i-1];\n      \n      // Skip periods with very low numbers to avoid false positives\n      if (previous.total < 5) continue;\n      \n      const metrics = ['positive', 'negative', 'total', 'featureRequests', 'bugReports'] as const;\n      \n      for (const metric of metrics) {\n        // For sentiment metrics, calculate the percentage change\n        if (metric === 'positive' || metric === 'negative') {\n          const currentPct = current[metric] / current.total;\n          const previousPct = previous[metric] / previous.total;\n          \n          if (Math.abs(currentPct - previousPct) >= thresholds[metric]) {\n            changes.push({\n              period: current.date,\n              metric,\n              change: currentPct - previousPct,\n              isIncrease: currentPct > previousPct\n            });\n          }\n        } \n        // For count metrics, calculate the relative change\n        else {\n          if (previous[metric] === 0) continue; // Avoid division by zero\n          \n          const relativeChange = (current[metric] - previous[metric]) / previous[metric];\n          \n          if (Math.abs(relativeChange) >= thresholds[metric]) {\n            changes.push({\n              period: current.date,\n              metric,\n              change: relativeChange,\n              isIncrease: relativeChange > 0\n            });\n          }\n        }\n      }\n    }\n    \n    return changes;\n  }, [trendData]);\n  \n  // Hide export notification after 3 seconds\n  useEffect(() => {\n    if (exportNotification.show) {\n      const timer = setTimeout(() => {\n        setExportNotification({show: false, message: ''});\n      }, 3000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [exportNotification.show]);\n\n  // Add click outside handler for export dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        showExportDropdown &&\n        exportDropdownRef.current &&\n        exportButtonRef.current &&\n        !exportDropdownRef.current.contains(event.target as Node) &&\n        !exportButtonRef.current.contains(event.target as Node)\n      ) {\n        setShowExportDropdown(false);\n      }\n    };\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && showExportDropdown) {\n        setShowExportDropdown(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [showExportDropdown]);\n\n  // Update getFilteredComments to return both filtered comments and total count\n  const getFilteredComments = () => {\n    if (!fetcher.data?.comments) return { filteredComments: [], totalFiltered: 0 };\n    \n    const filtered = fetcher.data.comments.filter(comment => {\n      const matchesSentiment = sentimentFilter === \"all\" || comment.sentiment === sentimentFilter;\n      const matchesRating = ratingFilter === \"all\" || comment.score === parseInt(ratingFilter);\n      const matchesSearch = !modalSearchTerm || \n        comment.content.toLowerCase().includes(modalSearchTerm.toLowerCase()) ||\n        comment.userName.toLowerCase().includes(modalSearchTerm.toLowerCase());\n      return matchesSentiment && matchesRating && matchesSearch;\n    });\n    \n    const indexOfLastItem = currentPage * itemsPerPage;\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n    return {\n      filteredComments: filtered.slice(indexOfFirstItem, indexOfLastItem),\n      totalFiltered: filtered.length\n    };\n  };\n\n  // Add useEffect to update search results count\n  useEffect(() => {\n    const { totalFiltered } = getFilteredComments();\n    setSearchResultsCount(totalFiltered);\n  }, [fetcher.data, modalSearchTerm, sentimentFilter, ratingFilter]);\n\n  // Handle page changes\n  const handlePageChange = (pageNumber: number, e: React.MouseEvent) => {\n    e.preventDefault();\n    setCurrentPage(pageNumber);\n  };\n\n  // Calculate total pages\n  const totalPages = Math.ceil(searchResultsCount / itemsPerPage);\n  const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);\n\n  // Add this pagination utility function after the imports\n  const getPageRange = (currentPage: number, totalPages: number) => {\n    const delta = 2; // Number of pages to show before and after current page\n    const range: (number | string)[] = [];\n    \n    for (let i = 1; i <= totalPages; i++) {\n      if (\n        i === 1 || // First page\n        i === totalPages || // Last page\n        (i >= currentPage - delta && i <= currentPage + delta) // Pages around current\n      ) {\n        range.push(i);\n      } else if (range[range.length - 1] !== '...') {\n        range.push('...');\n      }\n    }\n    \n    return range;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      // Log the form data being submitted\n      console.log('Submitting form with URL:', url, 'year:', year, 'searchTerm:', searchTerm);\n\n      // Validate URL format\n      const urlObj = new URL(url);\n      if (!urlObj.hostname.includes('play.google.com')) {\n        throw new Error('Please enter a valid Play Store URL');\n      }\n\n      const formData = new FormData();\n      formData.append(\"url\", url);\n      formData.append(\"year\", year);\n      formData.append(\"searchTerm\", searchTerm);\n      \n      console.log('Submitting to API...');\n      fetcher.submit(formData, {\n        method: \"POST\",\n        action: \"/api/comments\",\n      });\n    } catch (error) {\n      console.error('Form submission error:', error);\n      if (error instanceof Error) {\n        fetcher.data = { error: error.message } as AnalysisResult;\n      }\n    }\n  };\n\n  // Function to handle data export\n  const handleExport = (format: 'csv' | 'json', dataType: 'all' | 'filtered') => {\n    if (!fetcher.data?.comments) return;\n    \n    setIsExporting(true);\n    \n    try {\n      // Get the data to export based on the selected option\n      const dataToExport = dataType === 'filtered' ? getFilteredComments().filteredComments : fetcher.data.comments;\n      \n      // Get app name from URL\n      const appNameMatch = url.split('id=')[1]?.split('&')[0] || 'play-store-comments';\n      const date = new Date().toISOString().split('T')[0];\n      const fileName = `${appNameMatch}-${date}.${format}`;\n      \n      let content = '';\n      \n      if (format === 'json') {\n        // For JSON export, include all data including sentiment analysis and categorization\n        const exportData = {\n          comments: dataToExport,\n          sentiment: fetcher.data.sentiment,\n          keywords: fetcher.data.keywords,\n          intentions: fetcher.data.intentions ? {\n            feature_request: dataType === 'filtered' && fetcher.data.intentions\n              ? fetcher.data.intentions.feature_request.filter(comment => \n                  dataToExport.some(c => c.id === comment.id))\n              : fetcher.data.intentions?.feature_request || [],\n            bug_report: dataType === 'filtered' && fetcher.data.intentions\n              ? fetcher.data.intentions.bug_report.filter(comment => \n                  dataToExport.some(c => c.id === comment.id))\n              : fetcher.data.intentions?.bug_report || [],\n            praise: dataType === 'filtered' && fetcher.data.intentions\n              ? fetcher.data.intentions.praise.filter(comment => \n                  dataToExport.some(c => c.id === comment.id))\n              : fetcher.data.intentions?.praise || [],\n            complaint: dataType === 'filtered' && fetcher.data.intentions\n              ? fetcher.data.intentions.complaint.filter(comment => \n                  dataToExport.some(c => c.id === comment.id))\n              : fetcher.data.intentions?.complaint || []\n          } : {}\n        };\n        \n        content = JSON.stringify(exportData, null, 2);\n      } else if (format === 'csv') {\n        // For CSV export, create a header row and then add data rows\n        const headers = ['ID', 'User Name', 'Content', 'Score', 'Thumbs Up', 'Date', 'Year', 'Sentiment', 'Category'];\n        \n        // Create a map of comment IDs to their categories\n        const commentCategories = new Map();\n        \n        if (fetcher.data.intentions) {\n          Object.entries(fetcher.data.intentions).forEach(([category, comments]) => {\n            (comments as Comment[]).forEach(comment => {\n              commentCategories.set(comment.id, category);\n            });\n          });\n        }\n        \n        // Add header row\n        content = headers.join(',') + '\\n';\n        \n        // Add data rows\n        dataToExport.forEach(comment => {\n          const category = commentCategories.get(comment.id) || 'uncategorized';\n          const row = [\n            comment.id,\n            `\"${comment.userName.replace(/\"/g, '\"\"')}\"`,\n            `\"${comment.content.replace(/\"/g, '\"\"')}\"`,\n            comment.score,\n            comment.thumbsUp,\n            comment.date,\n            comment.year,\n            comment.sentiment,\n            category\n          ];\n          content += row.join(',') + '\\n';\n        });\n      }\n      \n      // Create a blob and download the file\n      const blob = new Blob([content], { type: format === 'json' ? 'application/json' : 'text/csv' });\n      const downloadUrl = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = downloadUrl;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(downloadUrl);\n      \n      setShowExportDropdown(false);\n      setExportNotification({\n        show: true, \n        message: `Export complete! ${fileName} has been downloaded.`\n      });\n    } catch (error) {\n      console.error('Export error:', error);\n      setExportNotification({\n        show: true, \n        message: `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Add fetcher state logging\n  console.log('Fetcher state:', fetcher.state);\n  console.log('Fetcher data:', fetcher.data);\n\n  // Calculate some values outside of JSX for better readability\n  const totalComments = fetcher.data?.comments?.length ?? 0;\n  const positiveCount = fetcher.data?.sentiment?.positive ?? 0;\n  const neutralCount = fetcher.data?.sentiment?.neutral ?? 0;\n  const negativeCount = fetcher.data?.sentiment?.negative ?? 0;\n  const featureRequestCount = fetcher.data?.intentions?.feature_request?.length ?? 0;\n  const bugReportCount = fetcher.data?.intentions?.bug_report?.length ?? 0;\n  const positivePercentage = totalComments > 0 \n    ? ((positiveCount / totalComments) * 100).toFixed(1) \n    : \"0.0\";\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <Sidebar />\n      <main className=\"p-4 sm:ml-64\">\n        <div className=\"container mx-auto px-4 py-4 mt-14\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                Overview\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Analyze app reviews and get insights\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              \n              {/* Export Button */}\n              {hasData && (\n                <div className=\"relative\">\n                  <button\n                    ref={exportButtonRef}\n                    onClick={() => setShowExportDropdown(!showExportDropdown)}\n                    disabled={isExporting}\n                    className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg inline-flex items-center\"\n                  >\n                    {isExporting ? (\n                      <>\n                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                        </svg>\n                        Exporting...\n                      </>\n                    ) : (\n                      <>\n                        <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 101.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                        </svg>\n                        Export\n                      </>\n                    )}\n                  </button>\n                  \n                  {/* Export Dropdown */}\n                  {showExportDropdown && (\n                    <div \n                      ref={exportDropdownRef}\n                      className=\"absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 z-50\"\n                    >\n                      <div className=\"py-1\" role=\"menu\" aria-orientation=\"vertical\">\n                        <div className=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-200 font-medium border-b border-gray-200 dark:border-gray-700\">\n                          Export Format\n                        </div>\n                        <button\n                          onClick={() => handleExport('csv', 'all')}\n                          className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                          role=\"menuitem\"\n                        >\n                          CSV - All Data\n                        </button>\n                        <button\n                          onClick={() => handleExport('csv', 'filtered')}\n                          className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                          role=\"menuitem\"\n                        >\n                          CSV - Filtered Data\n                        </button>\n                        <button\n                          onClick={() => handleExport('json', 'all')}\n                          className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                          role=\"menuitem\"\n                        >\n                          JSON - All Data\n                        </button>\n                        <button\n                          onClick={() => handleExport('json', 'filtered')}\n                          className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                          role=\"menuitem\"\n                        >\n                          JSON - Filtered Data\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Content based on active tab */}\n          {location.pathname === '/' ? (\n            <>\n              {/* URL Input Form */}\n              <form onSubmit={handleSubmit} className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-8\">\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  <div className=\"col-span-2\">\n                    <Label htmlFor=\"playstore-url\" className=\"mb-2\">\n                      Play Store URL\n                    </Label>\n                    <TextInput\n                      id=\"playstore-url\"\n                      type=\"url\"\n                      placeholder=\"https://play.google.com/store/apps/details?id=...\"\n                      required\n                      value={url}\n                      onChange={(e) => setUrl(e.target.value)}\n                      color=\"gray\"\n                      helperText=\"Enter your app's Play Store URL to analyze comments\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"year\" className=\"mb-2\">\n                      Filter by Year\n                    </Label>\n                    <Select\n                      id=\"year\"\n                      value={year}\n                      onChange={(e) => setYear(e.target.value)}\n                    >\n                      <option value=\"all\">All Years</option>\n                      <option value=\"2024\">2024</option>\n                      <option value=\"2023\">2023</option>\n                      <option value=\"2022\">2022</option>\n                      <option value=\"2021\">2021</option>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"mt-6\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    color=\"blue\"\n                    className=\"h-[42px]\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                        </svg>\n                        Processing...\n                      </>\n                    ) : (\n                      'Analyze Comments'\n                    )}\n                  </Button>\n                </div>\n              </form>\n\n              {error && (\n                <div className=\"bg-red-50 dark:bg-red-900/50 text-red-800 dark:text-red-200 p-4 rounded-lg mb-8\">\n                  <div className=\"flex\">\n                    <svg className=\"h-5 w-5 text-red-400 mr-2\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\"/>\n                    </svg>\n                    <span className=\"font-medium\">Error!</span>&nbsp;{error}\n                  </div>\n                </div>\n              )}\n\n              {hasData && (\n                <div className=\"space-y-6\">\n                  {/* Stats Grid */}\n                  <div className=\"grid md:grid-cols-4 gap-6\">\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total Comments</h3>\n                        <span className=\"text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-200 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                          Since last week\n                        </span>\n                      </div>\n                      <div className=\"flex items-baseline\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {totalComments}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Positive Sentiment</h3>\n                        <span className=\"text-green-600 bg-green-100 dark:bg-green-900 dark:text-green-200 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                          {positivePercentage}%\n                        </span>\n                      </div>\n                      <div className=\"flex items-baseline\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {positiveCount}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Feature Requests</h3>\n                        <span className=\"text-purple-600 bg-purple-100 dark:bg-purple-900 dark:text-purple-200 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                          New\n                        </span>\n                      </div>\n                      <div className=\"flex items-baseline\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {featureRequestCount}\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Bug Reports</h3>\n                        <span className=\"text-red-600 bg-red-100 dark:bg-red-900 dark:text-red-200 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                          Critical\n                        </span>\n                      </div>\n                      <div className=\"flex items-baseline\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {bugReportCount}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Keywords and Sentiment Analysis */}\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Top Keywords</h2>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {fetcher.data?.keywords?.map(({ word, count }) => (\n                          <span\n                            key={word}\n                            className=\"px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full dark:bg-blue-900 dark:text-blue-200\"\n                          >\n                            {word} ({count})\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                      <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Sentiment Distribution</h2>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-green-600\">\n                            {positiveCount}\n                          </div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            Positive\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-yellow-600\">\n                            {neutralCount}\n                          </div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            Neutral\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-red-600\">\n                            {negativeCount}\n                          </div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            Negative\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Trend Analysis Section */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6\">\n                    <div className=\"flex justify-between items-center mb-6\">\n                      <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Trend Analysis</h2>\n                      <div className=\"flex items-center space-x-4\">\n                        {/* Time Granularity Dropdown */}\n                        <div>\n                          <select\n                            className=\"px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm\"\n                            value={timeGranularity}\n                            onChange={(e) => setTimeGranularity(e.target.value as any)}\n                          >\n                            {timeframeOptions.map(option => (\n                              <option key={option.value} value={option.value}>\n                                {option.label}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        \n                        {/* Date Range Controls */}\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"date\"\n                            className=\"px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm\"\n                            value={dateRange.start || ''}\n                            onChange={(e) => {\n                              setDateRange(prev => ({ ...prev, start: e.target.value }));\n                              setShowAllTime(false);\n                            }}\n                            disabled={showAllTime}\n                          />\n                          <span className=\"text-gray-500 dark:text-gray-400\">to</span>\n                          <input\n                            type=\"date\"\n                            className=\"px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm\"\n                            value={dateRange.end || ''}\n                            onChange={(e) => {\n                              setDateRange(prev => ({ ...prev, end: e.target.value }));\n                              setShowAllTime(false);\n                            }}\n                            disabled={showAllTime}\n                          />\n                          <button\n                            className={`px-3 py-2 rounded-lg text-sm ${\n                              showAllTime \n                                ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200' \n                                : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-200'\n                            }`}\n                            onClick={() => setShowAllTime(!showAllTime)}\n                          >\n                            All Time\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Metrics Toggle */}\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.positive \n                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, positive: !prev.positive }))}\n                      >\n                        Positive Sentiment\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.negative \n                            ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, negative: !prev.negative }))}\n                      >\n                        Negative Sentiment\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.neutral \n                            ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, neutral: !prev.neutral }))}\n                      >\n                        Neutral Sentiment\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.total \n                            ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, total: !prev.total }))}\n                      >\n                        Total Comments\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.featureRequests \n                            ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, featureRequests: !prev.featureRequests }))}\n                      >\n                        Feature Requests\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          visibleMetrics.bugReports \n                            ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' \n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'\n                        }`}\n                        onClick={() => setVisibleMetrics(prev => ({ ...prev, bugReports: !prev.bugReports }))}\n                      >\n                        Bug Reports\n                      </button>\n                    </div>\n                    \n                    {/* Chart */}\n                    <div className=\"h-80 mt-6\">\n                      {trendData.length > 0 ? (\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <LineChart\n                            data={trendData}\n                            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                          >\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" opacity={0.1} />\n                            <XAxis \n                              dataKey=\"date\" \n                              stroke=\"#6B7280\"\n                              tick={{ fill: '#6B7280' }}\n                            />\n                            <YAxis \n                              stroke=\"#6B7280\"\n                              tick={{ fill: '#6B7280' }}\n                            />\n                            <Tooltip \n                              contentStyle={{ \n                                backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                                borderColor: '#E5E7EB',\n                                borderRadius: '0.5rem',\n                                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n                              }}\n                              formatter={(value, name) => {\n                                const formattedName = {\n                                  positive: 'Positive Sentiment',\n                                  negative: 'Negative Sentiment',\n                                  neutral: 'Neutral Sentiment',\n                                  total: 'Total Comments',\n                                  featureRequests: 'Feature Requests',\n                                  bugReports: 'Bug Reports'\n                                }[name] || name;\n                                \n                                return [value, formattedName];\n                              }}\n                              labelFormatter={(label) => `Period: ${label}`}\n                            />\n                            <Legend \n                              formatter={(value: string) => {\n                                const formattedValues: Record<string, string> = {\n                                  positive: 'Positive Sentiment',\n                                  negative: 'Negative Sentiment',\n                                  neutral: 'Neutral Sentiment',\n                                  total: 'Total Comments',\n                                  featureRequests: 'Feature Requests',\n                                  bugReports: 'Bug Reports'\n                                };\n                                \n                                return <span style={{ color: '#6B7280' }}>{formattedValues[value] || value}</span>;\n                              }}\n                            />\n                            <Brush \n                              dataKey=\"date\" \n                              height={30} \n                              stroke=\"#8884d8\"\n                              fill=\"rgba(136, 132, 216, 0.1)\"\n                            />\n                            \n                            {/* App Release Reference Lines */}\n                            {appReleases.map((release, index) => {\n                              // Find the closest data point to this release date\n                              const releaseDate = parseISO(release.date);\n                              let closestPoint = null;\n                              let minDiff = Infinity;\n                              \n                              for (const point of trendData) {\n                                // This is a simplification - in a real app, you'd parse the date properly\n                                const pointDate = new Date(point.date);\n                                const diff = Math.abs(pointDate.getTime() - releaseDate.getTime());\n                                \n                                if (diff < minDiff) {\n                                  minDiff = diff;\n                                  closestPoint = point;\n                                }\n                              }\n                              \n                              if (!closestPoint) return null;\n                              \n                              return (\n                                <ReferenceLine\n                                  key={index}\n                                  x={closestPoint.date}\n                                  stroke=\"#10B981\"\n                                  strokeDasharray=\"3 3\"\n                                  label={{\n                                    value: `v${release.version}`,\n                                    position: 'insideTopRight',\n                                    fill: '#10B981',\n                                    fontSize: 12\n                                  }}\n                                />\n                              );\n                            })}\n                            \n                            {/* Significant Changes Highlights */}\n                            {significantChanges.map((change, index) => {\n                              // Find the data point for this period\n                              const point = trendData.find(p => p.date === change.period);\n                              if (!point) return null;\n                              \n                              // Determine color based on metric and direction\n                              let color;\n                              if (change.metric === 'positive') {\n                                color = change.isIncrease ? '#10B981' : '#EF4444';\n                              } else if (change.metric === 'negative') {\n                                color = change.isIncrease ? '#EF4444' : '#10B981';\n                              } else if (change.metric === 'total') {\n                                color = '#3B82F6';\n                              } else if (change.metric === 'featureRequests') {\n                                color = '#8B5CF6';\n                              } else if (change.metric === 'bugReports') {\n                                color = '#F97316';\n                              }\n                              \n                              return (\n                                <ReferenceArea\n                                  key={`${change.period}-${change.metric}-${index}`}\n                                  x1={point.date}\n                                  x2={point.date}\n                                  strokeOpacity={0.3}\n                                  fill={color}\n                                  fillOpacity={0.2}\n                                />\n                              );\n                            })}\n                            \n                            {/* Chart Lines */}\n                            {visibleMetrics.positive && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"positive\"\n                                stroke=\"#10B981\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#10B981' }}\n                                activeDot={{ r: 6, fill: '#10B981' }}\n                              />\n                            )}\n                            {visibleMetrics.negative && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"negative\"\n                                stroke=\"#EF4444\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#EF4444' }}\n                                activeDot={{ r: 6, fill: '#EF4444' }}\n                              />\n                            )}\n                            {visibleMetrics.neutral && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"neutral\"\n                                stroke=\"#F59E0B\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#F59E0B' }}\n                                activeDot={{ r: 6, fill: '#F59E0B' }}\n                              />\n                            )}\n                            {visibleMetrics.total && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"total\"\n                                stroke=\"#3B82F6\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#3B82F6' }}\n                                activeDot={{ r: 6, fill: '#3B82F6' }}\n                              />\n                            )}\n                            {visibleMetrics.featureRequests && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"featureRequests\"\n                                stroke=\"#8B5CF6\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#8B5CF6' }}\n                                activeDot={{ r: 6, fill: '#8B5CF6' }}\n                              />\n                            )}\n                            {visibleMetrics.bugReports && (\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"bugReports\"\n                                stroke=\"#F97316\"\n                                strokeWidth={2}\n                                dot={{ r: 4, fill: '#F97316' }}\n                                activeDot={{ r: 6, fill: '#F97316' }}\n                              />\n                            )}\n                          </LineChart>\n                        </ResponsiveContainer>\n                      ) : (\n                        <div className=\"h-full flex items-center justify-center\">\n                          <p className=\"text-gray-500 dark:text-gray-400\">\n                            {hasData \n                              ? \"Not enough data to display trends. Try analyzing more comments.\"\n                              : \"Analyze comments to see trend data.\"}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Insights Panel */}\n                    {trendData.length > 0 && (\n                      <div className=\"mt-6 bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4\">\n                        <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                          Key Insights\n                        </h3>\n                        <div className=\"space-y-2\">\n                          {significantChanges.length > 0 ? (\n                            significantChanges.slice(0, 3).map((change, index) => (\n                              <InsightItem key={index} change={change} appReleases={appReleases} />\n                            ))\n                          ) : (\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              No significant changes detected in the current time period.\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Recent Comments */}\n                  <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n                    <div className=\"flex flex-col space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Recent Comments</h2>\n                      </div>\n                      \n                      {/* Search and Filters */}\n                      <div className=\"flex flex-col md:flex-row gap-4\">\n                        <div className=\"flex-1\">\n                          <form className=\"flex items-center\" onSubmit={(e) => e.preventDefault()}>   \n                            <label htmlFor=\"comment-search\" className=\"sr-only\">Search</label>\n                            <div className=\"relative w-full\">\n                              <div className=\"absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none\">\n                                <svg className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 20\">\n                                  <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z\"/>\n                                </svg>\n                              </div>\n                              <input \n                                type=\"text\" \n                                id=\"comment-search\" \n                                className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" \n                                placeholder=\"Search in comments...\" \n                                value={modalSearchTerm}\n                                onChange={(e) => {\n                                  setModalSearchTerm(e.target.value);\n                                  setCurrentPage(1); // Reset to first page on search\n                                }}\n                              />\n                            </div>\n                          </form>\n                          {modalSearchTerm && (\n                            <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">\n                              Found {searchResultsCount} {searchResultsCount === 1 ? 'result' : 'results'}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-4\">\n                          <select\n                            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 h-[42px] dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                            value={sentimentFilter}\n                            onChange={(e) => {\n                              setSentimentFilter(e.target.value);\n                              setCurrentPage(1); // Reset to first page on filter change\n                            }}\n                          >\n                            <option value=\"all\">All Sentiments</option>\n                            <option value=\"positive\">Positive</option>\n                            <option value=\"neutral\">Neutral</option>\n                            <option value=\"negative\">Negative</option>\n                          </select>\n                          <select\n                            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 h-[42px] dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                            value={ratingFilter}\n                            onChange={(e) => {\n                              setRatingFilter(e.target.value);\n                              setCurrentPage(1); // Reset to first page on filter change\n                            }}\n                          >\n                            <option value=\"all\">All Ratings</option>\n                            <option value=\"5\">\u2B50\u2B50\u2B50\u2B50\u2B50 (5)</option>\n                            <option value=\"4\">\u2B50\u2B50\u2B50\u2B50 (4)</option>\n                            <option value=\"3\">\u2B50\u2B50\u2B50 (3)</option>\n                            <option value=\"2\">\u2B50\u2B50 (2)</option>\n                            <option value=\"1\">\u2B50 (1)</option>\n                          </select>\n                        </div>\n                      </div>\n\n                      {/* Comments List with fixed height and sticky pagination */}\n                      <div className=\"relative min-h-[600px] flex flex-col\">\n                        <div className=\"space-y-4 flex-1 overflow-y-auto pb-16\">\n                          {getFilteredComments().filteredComments.map((comment) => (\n                            <div\n                              key={comment.id}\n                              className=\"flex flex-col p-6 rounded-lg bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-all border border-gray-100 dark:border-gray-700\"\n                            >\n                              <div className=\"flex items-start space-x-4\">\n                                <div className=\"flex-shrink-0\">\n                                  <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 flex items-center justify-center shadow-sm\">\n                                    <span className=\"text-lg font-semibold text-white\">\n                                      {comment.userName.charAt(0).toUpperCase()}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"flex items-start justify-between\">\n                                    <div>\n                                      <h3 className=\"text-base font-semibold text-gray-900 dark:text-white mb-1\">\n                                        {comment.userName}\n                                      </h3>\n                                      <div className=\"flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400\">\n                                        <time dateTime={comment.date}>\n                                          {new Date(comment.date).toLocaleDateString(undefined, { \n                                            year: 'numeric', \n                                            month: 'short', \n                                            day: 'numeric' \n                                          })}\n                                        </time>\n                                        <span>\u2022</span>\n                                        <span className=\"flex items-center\">\n                                          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5\"/>\n                                          </svg>\n                                          {comment.thumbsUp}\n                                        </span>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center\">\n                                      {[...Array(5)].map((_, index) => (\n                                        <svg \n                                          key={index}\n                                          className={`w-5 h-5 ${index < comment.score ? 'text-yellow-400' : 'text-gray-200 dark:text-gray-700'}`}\n                                          aria-hidden=\"true\"\n                                          xmlns=\"http://www.w3.org/2000/svg\"\n                                          fill=\"currentColor\"\n                                          viewBox=\"0 0 22 20\"\n                                        >\n                                          <path d=\"M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z\"/>\n                                        </svg>\n                                      ))}\n                                    </div>\n                                  </div>\n                                  <div className=\"mt-4 pl-0\">\n                                    <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-wrap text-[15px]\">\n                                      {comment.content}\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                          {getFilteredComments().filteredComments.length === 0 && (\n                            <div className=\"flex items-center justify-center h-32 text-gray-500 dark:text-gray-400\">\n                              No comments found matching your criteria\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Sticky Pagination */}\n                        {searchResultsCount > itemsPerPage && (\n                          <div className=\"absolute bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-4\">\n                            <nav className=\"flex justify-center\" aria-label=\"Comments pagination\">\n                              <ul className=\"inline-flex items-center -space-x-px\">\n                                <li>\n                                  <button\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      if (currentPage > 1) handlePageChange(currentPage - 1, e);\n                                    }}\n                                    disabled={currentPage === 1}\n                                    className=\"flex items-center justify-center px-3 h-8 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                                    aria-label=\"Previous page\"\n                                  >\n                                    <svg className=\"w-2.5 h-2.5 rtl:rotate-180\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\">\n                                      <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 1 1 5l4 4\"/>\n                                    </svg>\n                                    <span className=\"sr-only\">Previous</span>\n                                  </button>\n                                </li>\n                                \n                                {getPageRange(currentPage, totalPages).map((pageNum, index) => (\n                                  <li key={index}>\n                                    {pageNum === '...' ? (\n                                      <span className=\"flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400\">\n                                        ...\n                                      </span>\n                                    ) : (\n                                      <button\n                                        onClick={(e) => handlePageChange(pageNum as number, e)}\n                                        aria-current={currentPage === pageNum ? 'page' : undefined}\n                                        className={`flex items-center justify-center px-3 h-8 leading-tight ${\n                                          currentPage === pageNum\n                                            ? 'z-10 text-blue-600 border border-blue-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white'\n                                            : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'\n                                        }`}\n                                        aria-label={`Page ${pageNum}`}\n                                      >\n                                        {pageNum}\n                                      </button>\n                                    )}\n                                  </li>\n                                ))}\n                                \n                                <li>\n                                  <button\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      if (currentPage < totalPages) handlePageChange(currentPage + 1, e);\n                                    }}\n                                    disabled={currentPage === totalPages}\n                                    className=\"flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n                                    aria-label=\"Next page\"\n                                  >\n                                    <svg className=\"w-2.5 h-2.5 rtl:rotate-180\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\">\n                                      <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 9 4-4-4-4\"/>\n                                    </svg>\n                                    <span className=\"sr-only\">Next</span>\n                                  </button>\n                                </li>\n                              </ul>\n                            </nav>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </>\n          ) : location.pathname === '/history' ? (\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n              <p className=\"text-gray-600 dark:text-gray-400\">History feature coming soon...</p>\n            </div>\n          ) : null}\n        </div>\n      </main>\n\n      {/* All Comments Modal */}\n      {showAllComments && hasData && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n            <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">All Comments</h2>\n                <button\n                  onClick={() => setShowAllComments(false)}\n                  className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                >\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex-1\">\n                </div>\n                <select\n                  className=\"px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                  value={sentimentFilter}\n                  onChange={(e) => setSentimentFilter(e.target.value)}\n                >\n                  <option value=\"all\">All Sentiments</option>\n                  <option value=\"positive\">Positive</option>\n                  <option value=\"neutral\">Neutral</option>\n                  <option value=\"negative\">Negative</option>\n                </select>\n                <select\n                  className=\"px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                  value={ratingFilter}\n                  onChange={(e) => setRatingFilter(e.target.value)}\n                >\n                  <option value=\"all\">All Ratings</option>\n                  <option value=\"5\">\u2B50\u2B50\u2B50\u2B50\u2B50 (5)</option>\n                  <option value=\"4\">\u2B50\u2B50\u2B50\u2B50 (4)</option>\n                  <option value=\"3\">\u2B50\u2B50\u2B50 (3)</option>\n                  <option value=\"2\">\u2B50\u2B50 (2)</option>\n                  <option value=\"1\">\u2B50 (1)</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"p-6 overflow-y-auto flex-1\">\n              <div className=\"space-y-4\">\n                {getFilteredComments().filteredComments.map((comment) => (\n                  <div\n                    key={comment.id}\n                    className=\"flex items-start space-x-4 p-4 rounded-lg bg-gray-50 dark:bg-gray-700/50\"\n                  >\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-10 h-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n                        <span className=\"text-blue-600 dark:text-blue-200 font-medium\">\n                          {comment.userName.charAt(0)}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {comment.userName}\n                        </h3>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-yellow-400 mr-1\">\u2605</span>\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                            {comment.score}\n                          </span>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-1\">\n                        {comment.content}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {new Date(comment.date).toLocaleDateString()}\n                        </span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          \uD83D\uDC4D {comment.thumbsUp}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-A6KASX4T.js','imports':['/build/_shared/chunk-4ZNTBH4S.js','/build/_shared/chunk-BGJAF3OO.js','/build/_shared/chunk-PTAIRCKJ.js','/build/_shared/chunk-OPGM6WIO.js','/build/_shared/chunk-WWEL7QKW.js','/build/_shared/chunk-2AFRYLX2.js','/build/_shared/chunk-N4FG5RPV.js','/build/_shared/chunk-RODUX5XG.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-CGQJLUQI.js','imports':['/build/_shared/chunk-ZKVZXHCC.js','/build/_shared/chunk-LYT6NCUF.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-RUBOV3QF.js','imports':['/build/_shared/chunk-GMLRMA33.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.comments':{'id':'routes/api.comments','parentId':'root','path':'api/comments','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.comments-P4EJO6UZ.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.compare':{'id':'routes/api.compare','parentId':'root','path':'api/compare','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.compare-3R23RE63.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/comparison':{'id':'routes/comparison','parentId':'root','path':'comparison','index':undefined,'caseSensitive':undefined,'module':'/build/routes/comparison-AURRQKIE.js','imports':['/build/_shared/chunk-GMLRMA33.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'4575be17','hmr':{'runtime':'/build/_shared/chunk-PTAIRCKJ.js','timestamp':1741077365641},'url':'/build/manifest-4575BE17.js'};", "\nimport * as entryServer from \"/Users/iakbar/Downloads/cursor/playstore-comment/uxtools-play-store-scrapper/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/api.comments.ts\";\nimport * as route2 from \"./routes/api.compare.ts\";\nimport * as route3 from \"./routes/comparison.tsx\";\nimport * as route4 from \"./routes/_index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":true,\"v3_relativeSplatPath\":true,\"v3_throwAbortReason\":true,\"v3_routeConfig\":false,\"v3_singleFetch\":true,\"v3_lazyRouteDiscovery\":true,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/api.comments\": {\n      id: \"routes/api.comments\",\n      parentId: \"root\",\n      path: \"api/comments\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/api.compare\": {\n      id: \"routes/api.compare\",\n      parentId: \"root\",\n      path: \"api/compare\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/comparison\": {\n      id: \"routes/comparison\",\n      parentId: \"root\",\n      path: \"comparison\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "jsxDEV", "sentiment", "keywords", "action", "json", "gplay", "natural", "gplay", "action", "json", "jsxDEV", "useState", "Card", "jsxDEV", "jsxDEV", "Card", "Button", "jsxDEV", "jsxDEV", "formatDiff", "getDiffColorClass", "Card", "Button", "entry", "Card", "useMemo", "jsxDEV", "Bar", "Tooltip", "Legend", "jsxDEV", "Card", "Line", "ChartJS", "CategoryScale", "LinearScale", "Title", "Tooltip", "Legend", "jsxDEV", "chartColors", "Card", "Badge", "useMemo", "jsxDEV", "sentiment", "Button", "jsxDEV", "jsxDEV", "useState", "Card", "jsxDEV", "meta", "useState", "useMemo", "useLocation", "LineChart", "Line", "XAxis", "YAxis", "CartesianGrid", "Tooltip", "Legend", "ResponsiveContainer", "Label", "TextInput", "Select", "Button", "Fragment", "jsxDEV", "meta", "useLocation", "useState", "useMemo", "currentPage", "totalPages", "error", "format", "ResponsiveContainer", "LineChart", "CartesianGrid", "XAxis", "YAxis", "Tooltip", "Legend", "Line"]
}
