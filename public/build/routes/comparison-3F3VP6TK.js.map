{
  "version": 3,
  "sources": ["../../../app/components/comparison/ComparisonDashboard.tsx", "../../../app/components/comparison/AppComparisonForm.tsx", "../../../app/components/comparison/MetricsComparison.tsx", "../../../app/components/common/LoadingSpinner.tsx", "../../../app/utils/comparisonApi.ts", "../../../app/routes/comparison.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/comparison/ComparisonDashboard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/comparison/ComparisonDashboard.tsx\");\n  import.meta.hot.lastModified = \"1741011424660.8948\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport AppComparisonForm from \"./AppComparisonForm\";\nimport MetricsComparison from \"./MetricsComparison\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\nimport { fetchAppData } from \"~/utils/comparisonApi\";\nexport default function ComparisonDashboard() {\n  _s();\n  const [apps, setApps] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleAddApps = async appIds => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const appDataPromises = appIds.map(id => fetchAppData(id));\n      const results = await Promise.all(appDataPromises);\n      setApps(results);\n    } catch (err) {\n      setError(\"Failed to fetch app data. Please check the app IDs and try again.\");\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleRemoveApp = appId => {\n    setApps(prevApps => prevApps.filter(app => app.id !== appId));\n  };\n  return <div className=\"space-y-8\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">\n          Compare Apps\n        </h2>\n        <AppComparisonForm onSubmit={handleAddApps} />\n      </div>\n\n      {error && <div className=\"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 rounded\">\n          <p className=\"text-red-700 dark:text-red-400\">{error}</p>\n        </div>}\n\n      {isLoading ? <div className=\"flex justify-center py-12\">\n          <LoadingSpinner size=\"lg\" />\n        </div> : apps.length > 0 ? <div className=\"space-y-8\">\n          <MetricsComparison apps={apps} onRemoveApp={handleRemoveApp} />\n        </div> : <div className=\"bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-4 rounded\">\n          <p className=\"text-blue-700 dark:text-blue-400\">\n            Add app IDs to start comparing. You can find app IDs in their Play Store URLs (e.g., com.example.app).\n          </p>\n        </div>}\n    </div>;\n}\n_s(ComparisonDashboard, \"1omLtnDAqQ+uV1lGBRSGhWivFTE=\");\n_c = ComparisonDashboard;\nvar _c;\n$RefreshReg$(_c, \"ComparisonDashboard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/comparison/AppComparisonForm.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/comparison/AppComparisonForm.tsx\");\n  import.meta.hot.lastModified = \"1741011380887.5176\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nexport default function AppComparisonForm({\n  onSubmit\n}) {\n  _s();\n  const [appInputs, setAppInputs] = useState(['', '']);\n  const handleInputChange = (index, value) => {\n    const newInputs = [...appInputs];\n    newInputs[index] = value;\n    setAppInputs(newInputs);\n  };\n  const handleAddInput = () => {\n    if (appInputs.length < 5) {\n      setAppInputs([...appInputs, '']);\n    }\n  };\n  const handleRemoveInput = index => {\n    if (appInputs.length > 2) {\n      const newInputs = [...appInputs];\n      newInputs.splice(index, 1);\n      setAppInputs(newInputs);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const validAppIds = appInputs.filter(id => id.trim() !== '');\n    if (validAppIds.length >= 2) {\n      onSubmit(validAppIds);\n    }\n  };\n  return <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"space-y-3\">\n        {appInputs.map((input, index) => <div key={index} className=\"flex items-center gap-2\">\n            <div className=\"flex-1\">\n              <label htmlFor={`app-${index}`} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                {index === 0 ? \"Your App ID\" : `Competitor App ID ${index}`}\n              </label>\n              <input id={`app-${index}`} type=\"text\" value={input} onChange={e => handleInputChange(index, e.target.value)} placeholder=\"e.g., com.example.app\" className=\"mt-1 block w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 \n                         bg-white dark:bg-gray-700 text-gray-900 dark:text-white \n                         placeholder-gray-400 dark:placeholder-gray-400\n                         focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n            </div>\n            {index >= 2 && <button type=\"button\" onClick={() => handleRemoveInput(index)} className=\"mt-6 p-2 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\" aria-label=\"Remove app\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                </svg>\n              </button>}\n          </div>)}\n      </div>\n      \n      <div className=\"flex justify-between\">\n        <button type=\"button\" onClick={handleAddInput} disabled={appInputs.length >= 5} className={`inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 \n                    rounded-md text-sm shadow-sm \n                    ${appInputs.length >= 5 ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500 cursor-not-allowed' : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600'}`}>\n          <svg className=\"mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n          </svg>\n          Add Another App\n        </button>\n        \n        <button type=\"submit\" className=\"inline-flex items-center px-4 py-2 border border-transparent \n                   text-sm font-medium rounded-md shadow-sm text-white \n                   bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\n          Compare Apps\n        </button>\n      </div>\n    </form>;\n}\n_s(AppComparisonForm, \"V/S1R7tMTs7qgYnYmSa+HUoevI0=\");\n_c = AppComparisonForm;\nvar _c;\n$RefreshReg$(_c, \"AppComparisonForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/comparison/MetricsComparison.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/comparison/MetricsComparison.tsx\");\n  import.meta.hot.lastModified = \"1741011376918.678\";\n}\n// REMIX HMR END\n\nimport { useMemo } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell, LineChart, Line } from \"recharts\";\nexport default function MetricsComparison({\n  apps,\n  onRemoveApp\n}) {\n  _s();\n  const primaryApp = apps[0];\n\n  // Calculate percentage differences from the primary app\n  const percentageDiffs = useMemo(() => {\n    return apps.map(app => {\n      if (app.id === primaryApp.id) return null;\n      return {\n        averageRating: (app.averageRating - primaryApp.averageRating) / primaryApp.averageRating * 100,\n        totalReviews: (app.totalReviews - primaryApp.totalReviews) / primaryApp.totalReviews * 100,\n        sentimentPositive: (app.sentimentDistribution.positive - primaryApp.sentimentDistribution.positive) / primaryApp.sentimentDistribution.positive * 100,\n        sentimentNeutral: (app.sentimentDistribution.neutral - primaryApp.sentimentDistribution.neutral) / primaryApp.sentimentDistribution.neutral * 100,\n        sentimentNegative: (app.sentimentDistribution.negative - primaryApp.sentimentDistribution.negative) / primaryApp.sentimentDistribution.negative * 100,\n        commentVolume: (app.commentVolume.total - primaryApp.commentVolume.total) / primaryApp.commentVolume.total * 100\n      };\n    });\n  }, [apps, primaryApp]);\n\n  // Format percentage difference with + or - sign\n  const formatDiff = diff => {\n    if (diff === null || diff === undefined) return '';\n    return `${diff > 0 ? '+' : ''}${diff.toFixed(1)}%`;\n  };\n\n  // Determine color class based on diff value and metric type\n  const getDiffColorClass = (diff, isNegativeGood = false) => {\n    if (diff === null || diff === undefined) return '';\n    const isPositive = diff > 0;\n    const isGood = isNegativeGood ? !isPositive : isPositive;\n    return isGood ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400';\n  };\n\n  // Prepare data for charts\n  const chartData = useMemo(() => {\n    return {\n      ratings: apps.map(app => ({\n        name: app.name,\n        rating: app.averageRating,\n        color: app.id === primaryApp.id ? '#3B82F6' : '#10B981',\n        diff: app.id === primaryApp.id ? 0 : (app.averageRating - primaryApp.averageRating) / primaryApp.averageRating * 100\n      })),\n      reviews: apps.map(app => ({\n        name: app.name,\n        reviews: app.totalReviews,\n        color: app.id === primaryApp.id ? '#3B82F6' : '#10B981',\n        diff: app.id === primaryApp.id ? 0 : (app.totalReviews - primaryApp.totalReviews) / primaryApp.totalReviews * 100\n      }))\n    };\n  }, [apps, primaryApp]);\n\n  // Prepare monthly comment volume data\n  const commentTrendData = useMemo(() => {\n    return primaryApp.commentVolume.months.map((month, i) => {\n      const dataPoint = {\n        name: month\n      };\n      apps.forEach(app => {\n        dataPoint[app.id] = app.commentVolume.perMonth[i] || 0;\n      });\n      return dataPoint;\n    });\n  }, [apps, primaryApp]);\n  const appColors = useMemo(() => {\n    const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n    return apps.reduce((acc, app, index) => {\n      acc[app.id] = colors[index % colors.length];\n      return acc;\n    }, {});\n  }, [apps]);\n  return <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md\">\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <h2 className=\"text-xl font-semibold text-gray-800 dark:text-white\">\n          Metrics Comparison\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n          Compare key metrics between apps\n        </p>\n      </div>\n\n      {/* App Headers with Icons */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-6\">\n        {apps.map((app, index) => <div key={app.id} className={`p-4 rounded-lg ${index === 0 ? 'bg-blue-50 dark:bg-blue-900/30' : 'bg-gray-50 dark:bg-gray-700/30'}`}>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"relative\">\n                <img src={app.icon} alt={`${app.name} icon`} className=\"w-16 h-16 rounded-lg shadow-sm\" />\n                {index > 0 && <button onClick={() => onRemoveApp(app.id)} className=\"absolute -top-2 -right-2 bg-red-500 rounded-full p-1 text-white hover:bg-red-600 shadow\" aria-label=\"Remove app\">\n                    <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>}\n              </div>\n              <h3 className=\"mt-3 font-medium text-center text-gray-800 dark:text-white truncate max-w-full\">\n                {app.name}\n              </h3>\n              {index === 0 && <span className=\"mt-1 inline-block px-2 py-1 text-xs bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full\">\n                  Your App\n                </span>}\n            </div>\n          </div>)}\n      </div>\n\n      {/* Ratings Chart */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Average Rating</h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={chartData.ratings} margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis domain={[0, 5]} />\n              <Tooltip formatter={(value, name) => {\n              if (name === 'rating') {\n                return [`${value} \u2605`, 'Rating'];\n              }\n              return [value, name];\n            }} labelFormatter={name => `App: ${name}`} />\n              <Legend />\n              <Bar dataKey=\"rating\" name=\"Rating\" radius={[4, 4, 0, 0]}>\n                {chartData.ratings.map((entry, index) => <Cell key={`cell-${index}`} fill={entry.color} />)}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        {/* Rating Comparison Table */}\n        <div className=\"mt-4 overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  App\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Rating\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Difference\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {chartData.ratings.map((app, index) => <tr key={`rating-${app.name}`}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                    {app.name} {index === 0 && <span className=\"ml-2 text-xs text-blue-600\">(Your App)</span>}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {app.rating.toFixed(1)} \u2605\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {index === 0 ? <span className=\"text-gray-400\">-</span> : <span className={getDiffColorClass(app.diff)}>\n                        {formatDiff(app.diff)}\n                      </span>}\n                  </td>\n                </tr>)}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Reviews Chart */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Total Reviews</h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={chartData.reviews} margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip formatter={value => [value.toLocaleString(), 'Reviews']} labelFormatter={name => `App: ${name}`} />\n              <Legend />\n              <Bar dataKey=\"reviews\" name=\"Reviews\" radius={[4, 4, 0, 0]}>\n                {chartData.reviews.map((entry, index) => <Cell key={`cell-${index}`} fill={entry.color} />)}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n        \n        {/* Reviews Comparison Table */}\n        <div className=\"mt-4 overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  App\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Total Reviews\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Difference\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {chartData.reviews.map((app, index) => <tr key={`reviews-${app.name}`}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                    {app.name} {index === 0 && <span className=\"ml-2 text-xs text-blue-600\">(Your App)</span>}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {app.reviews.toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {index === 0 ? <span className=\"text-gray-400\">-</span> : <span className={getDiffColorClass(app.diff)}>\n                        {formatDiff(app.diff)}\n                      </span>}\n                  </td>\n                </tr>)}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Sentiment Distribution */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Sentiment Distribution</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {apps.map((app, index) => <div key={`sentiment-${app.id}`} className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <h4 className=\"font-medium text-gray-800 dark:text-white\">\n                  {app.name}\n                </h4>\n                {index === 0 && <span className=\"inline-block px-2 py-1 text-xs bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 rounded-full\">\n                    Your App\n                  </span>}\n              </div>\n              \n              {/* Sentiment Bars */}\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">Positive</span>\n                    <div className=\"flex items-center\">\n                      <span className=\"text-gray-700 dark:text-gray-300\">{app.sentimentDistribution.positive}%</span>\n                      {index > 0 && <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentPositive)}`}>\n                          ({formatDiff(percentageDiffs[index]?.sentimentPositive)})\n                        </span>}\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                    <div className=\"bg-green-500 h-2 rounded-full\" style={{\n                  width: `${app.sentimentDistribution.positive}%`\n                }}></div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">Neutral</span>\n                    <div className=\"flex items-center\">\n                      <span className=\"text-gray-700 dark:text-gray-300\">{app.sentimentDistribution.neutral}%</span>\n                      {index > 0 && <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentNeutral)}`}>\n                          ({formatDiff(percentageDiffs[index]?.sentimentNeutral)})\n                        </span>}\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                    <div className=\"bg-yellow-400 h-2 rounded-full\" style={{\n                  width: `${app.sentimentDistribution.neutral}%`\n                }}></div>\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">Negative</span>\n                    <div className=\"flex items-center\">\n                      <span className=\"text-gray-700 dark:text-gray-300\">{app.sentimentDistribution.negative}%</span>\n                      {index > 0 && <span className={`ml-1 text-xs ${getDiffColorClass(percentageDiffs[index]?.sentimentNegative, true)}`}>\n                          ({formatDiff(percentageDiffs[index]?.sentimentNegative)})\n                        </span>}\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                    <div className=\"bg-red-500 h-2 rounded-full\" style={{\n                  width: `${app.sentimentDistribution.negative}%`\n                }}></div>\n                  </div>\n                </div>\n              </div>\n            </div>)}\n        </div>\n      </div>\n\n      {/* Comment Volume Trends */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-white\">Comment Volume Trends</h3>\n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={commentTrendData} margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              {apps.map((app, index) => <Line key={app.id} type=\"monotone\" dataKey={app.id} name={app.name} stroke={appColors[app.id]} strokeWidth={2} dot={{\n              r: 4\n            }} activeDot={{\n              r: 6\n            }} />)}\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Comment Volume Comparison */}\n        <div className=\"mt-4 overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  App\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Total Comments\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Avg. Comments/Month\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 dark:bg-gray-700 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Difference (Total)\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {apps.map((app, index) => {\n              const avgPerMonth = Math.round(app.commentVolume.perMonth.reduce((a, b) => a + b, 0) / app.commentVolume.perMonth.length);\n              return <tr key={`volume-${app.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                      {app.name} {index === 0 && <span className=\"ml-2 text-xs text-blue-600\">(Your App)</span>}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                      {app.commentVolume.total.toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                      {avgPerMonth.toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {index === 0 ? <span className=\"text-gray-400\">-</span> : <span className={getDiffColorClass(percentageDiffs[index]?.commentVolume)}>\n                          {formatDiff(percentageDiffs[index]?.commentVolume)}\n                        </span>}\n                    </td>\n                  </tr>;\n            })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>;\n}\n_s(MetricsComparison, \"cpd19qlEpymsOJY0V3A+uKOH6aM=\");\n_c = MetricsComparison;\nvar _c;\n$RefreshReg$(_c, \"MetricsComparison\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/common/LoadingSpinner.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/common/LoadingSpinner.tsx\");\n  import.meta.hot.lastModified = \"1741011179284.3198\";\n}\n// REMIX HMR END\n\nexport default function LoadingSpinner({\n  size = \"md\"\n}) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-8 h-8\",\n    lg: \"w-12 h-12\"\n  };\n  return <div className=\"flex justify-center\">\n      <div className={`${sizeClasses[size]} border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin`}></div>\n    </div>;\n}\n_c = LoadingSpinner;\nvar _c;\n$RefreshReg$(_c, \"LoadingSpinner\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/comparisonApi.ts\"\n);\nimport.meta.hot.lastModified = \"1741011178424.4656\";\n}\n// REMIX HMR END\n\nimport type { AppData } from \"~/components/comparison/ComparisonDashboard\";\n\n// This is a mock implementation for demonstration purposes\n// In a real app, you would call your backend API\nexport async function fetchAppData(appId: string): Promise<AppData> {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Generate mock app data based on appId\n  const hash = generateSimpleHash(appId);\n  \n  return {\n    id: appId,\n    name: getAppName(appId),\n    icon: `https://picsum.photos/seed/${hash}/200`,\n    averageRating: 3 + (hash % 20) / 10, // Between 3.0 and 5.0\n    totalReviews: 1000 + (hash % 9000),\n    sentimentDistribution: {\n      positive: 40 + (hash % 40),\n      neutral: 10 + (hash % 20),\n      negative: 5 + (hash % 25)\n    },\n    commentVolume: {\n      total: 500 + (hash % 4500),\n      perMonth: Array.from({ length: 12 }, () => 20 + (hash % 100)),\n      months: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    },\n    keywords: generateMockKeywords(hash)\n  };\n}\n\n// Helper function to generate a simple numeric hash from a string\nfunction generateSimpleHash(str: string): number {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = ((hash << 5) - hash) + str.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n  return Math.abs(hash);\n}\n\n// Generate mock keywords\nfunction generateMockKeywords(seed: number): Array<{ term: string, count: number, sentiment: number }> {\n  const keywords = [\n    \"user interface\", \"performance\", \"battery life\", \"crash\", \"bug\", \n    \"feature\", \"update\", \"design\", \"usability\", \"customer service\",\n    \"login\", \"notification\", \"payment\", \"speed\", \"stability\", \n    \"responsive\", \"intuitive\", \"reliable\", \"glitch\", \"improvement\"\n  ];\n  \n  // Use the seed to select and mix keywords\n  return keywords\n    .slice(seed % 5, (seed % 5) + 10)\n    .map((term, index) => ({\n      term,\n      count: 5 + ((seed + index) % 95),\n      sentiment: -0.9 + ((seed + index) % 19) / 10 // Between -0.9 and +0.9\n    }));\n}\n\n// Generate a readable app name from the app ID\nfunction getAppName(appId: string): string {\n  // Extract a product name from the app ID (e.g., \"com.example.myproduct\" -> \"My Product\")\n  const parts = appId.split('.');\n  if (parts.length > 2) {\n    const productPart = parts[2];\n    return productPart\n      .replace(/([A-Z])/g, ' $1') // Add spaces before capitals\n      .replace(/^./, str => str.toUpperCase()) // Capitalize first letter\n      .replace(/([a-z])([A-Z])/g, '$1 $2') // Add space between camelCase\n      .trim();\n  }\n  return appId;\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/comparison.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/comparison.tsx\");\n  import.meta.hot.lastModified = \"1741012125241.9756\";\n}\n// REMIX HMR END\n\nimport Sidebar from \"~/components/common/Sidebar\";\nimport ComparisonDashboard from \"~/components/comparison/ComparisonDashboard\";\nexport const meta = () => {\n  return [{\n    title: \"App Comparison - Play Store Comment Analyzer\"\n  }, {\n    name: \"description\",\n    content: \"Compare your app with competitors\"\n  }];\n};\nexport default function Comparison() {\n  return <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <Sidebar />\n      <main className=\"ml-64 flex-1 min-h-screen bg-gray-100 dark:bg-gray-900\">\n        <div className=\"container mx-auto px-6 py-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                App Comparison\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Compare your app with competitors\n              </p>\n            </div>\n          </div>\n          <ComparisonDashboard />\n        </div>\n      </main>\n    </div>;\n}\n_c = Comparison;\nvar _c;\n$RefreshReg$(_c, \"Comparison\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_jsx_dev_runtime", "_s", "_c", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_c", "import_jsx_dev_runtime", "_c"]
}
